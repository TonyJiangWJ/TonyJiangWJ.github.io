<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://tonyjiangwj.github.io/atom.xml" rel="self"/>
  
  <link href="https://tonyjiangwj.github.io/"/>
  <updated>2023-09-09T06:41:07.289Z</updated>
  <id>https://tonyjiangwj.github.io/</id>
  
  <author>
    <name>TonyJiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装PowerShell7并配置ohmyposh</title>
    <link href="https://tonyjiangwj.github.io/2023/09/09/%E5%AE%89%E8%A3%85PowerShell7%E5%B9%B6%E9%85%8D%E7%BD%AEohmyposh/"/>
    <id>https://tonyjiangwj.github.io/2023/09/09/%E5%AE%89%E8%A3%85PowerShell7%E5%B9%B6%E9%85%8D%E7%BD%AEohmyposh/</id>
    <published>2023-09-09T06:13:50.000Z</published>
    <updated>2023-09-09T06:41:07.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装PowerShell"><a href="#安装PowerShell" class="headerlink" title="安装PowerShell"></a>安装PowerShell</h2><ul><li>windowns10默认情况下，自带的PowerShell为5.1，属于很难用的那种。因此需要自己安装最新版的PowerShell7，微软新一代跨平台版本Shell，好用很多。</li></ul><h3 id="1、使用winget安装"><a href="#1、使用winget安装" class="headerlink" title="1、使用winget安装"></a>1、使用winget安装</h3><ul><li><p>使用官方推荐方式进行安装，win+x 打开自带的PowerShell，输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找当前可用的PowerShell版本</span></span><br><span class="line">winget search Microsoft.PowerShell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用winget安装PowerShell，这里安装stable版本</span></span><br><span class="line">winget install --id Microsoft.PowerShell</span><br></pre></td></tr></table></figure></li><li><p>安装完毕之后，新版的PowerShell为pwsh.exe 默认已经添加到环境变量中</p></li></ul><h3 id="2、替换PowerShell入口"><a href="#2、替换PowerShell入口" class="headerlink" title="2、替换PowerShell入口"></a>2、替换PowerShell入口</h3><ul><li>此时需要替换 <code>win+x</code> 和菜单右键中的PowerShell入口，否则使用的还是旧版本的</li><li>在windows菜单中搜索 <code>Windows PowerShell</code> 右键文件所在位置，可以看到快捷方式文件，选中后右键修改它的属性，目标修改为 <code>&quot;C:\Program Files\PowerShell\7\pwsh.exe&quot;</code> ，起始位置可以根据自己习惯修改，为这里改为用户目录：<code>%USERPROFILE%</code></li><li>然后是修改按住shift时右键菜单中的<code>在PowerShell中打开</code></li><li><code>win+r</code> 运行 regedit，找到 <code>HKEY_CLASSES_ROOT\Directory\Background\shell\PowerShell\command</code></li><li>默认情况下<code>command</code>是归属于TrustedInstaller，无法修改当前用户的控制权，需要将所有者进行修改。右键<code>command</code>，点击权限，高级，更改所有者为当前登录用户，完成后点击确定。然后在权限-安全窗口中选中登录用户，勾选上完全控制，点击确认关闭权限窗口。</li><li>然后在注册表编辑器中选中 <code>command</code> 在右侧修改 <code>(默认)</code> 的数值数据，将powershell.exe改为pwsh.exe，然后点击确定即可</li><li>以上步骤完成后win+x和菜单右键中的PowerShell都将被替换为pwsh.exe也就是最新版本</li></ul><h2 id="安装windows终端"><a href="#安装windows终端" class="headerlink" title="安装windows终端"></a>安装windows终端</h2><ul><li>控制台其实还是不好看，建议直接安装windows终端</li><li>具体教程参考微软的官方说明即可：<a href="https://learn.microsoft.com/zh-cn/windows/terminal/install">https://learn.microsoft.com/zh-cn/windows/terminal/install</a></li><li>安装完毕后，在设置中将默认配置文件改为 PowerShell 即可</li></ul><h2 id="安装ohmyposh"><a href="#安装ohmyposh" class="headerlink" title="安装ohmyposh"></a>安装ohmyposh</h2><ul><li>在MacOS下，我特别喜欢使用zsh+ohmyzsh，有很多好看的主题。现在使用PowerShell也有了类似的插件叫ohmyposh</li><li>官方安装指南：<a href="https://ohmyposh.dev/docs/installation/windows">https://ohmyposh.dev/docs/installation/windows</a></li></ul><h3 id="1、安装ohmyposh"><a href="#1、安装ohmyposh" class="headerlink" title="1、安装ohmyposh"></a>1、安装ohmyposh</h3><ul><li><p>这里还是推荐使用winget进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget install JanDeDobbeleer.OhMyPosh -s winget</span><br></pre></td></tr></table></figure></li><li><p>安装完毕后需要重启一下终端，载入环境变量</p></li></ul><h3 id="2、安装Nerd-Fonts字体"><a href="#2、安装Nerd-Fonts字体" class="headerlink" title="2、安装Nerd Fonts字体"></a>2、安装Nerd Fonts字体</h3><ul><li><p>主题中可以使用unicode等字符，因此需要安装相应的字体</p></li><li><p>有两种方式，推荐直接去这个网站下载：<a href="https://www.nerdfonts.com/font-downloads">https://www.nerdfonts.com/font-downloads</a> 可以直接预览字体，下载对应的压缩包后解压，选中字体文件右键安装即可</p></li><li><p>另一种方式是使用官方说明中的命令安装：<a href="https://ohmyposh.dev/docs/installation/fonts">https://ohmyposh.dev/docs/installation/fonts</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh font install</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、配置字体"><a href="#3、配置字体" class="headerlink" title="3、配置字体"></a>3、配置字体</h3><h4 id="在windows-terminal中"><a href="#在windows-terminal中" class="headerlink" title="在windows terminal中"></a>在windows terminal中</h4><ul><li><p>打开windows terminal，在界面中按下 <code>ctrl+shift+,</code> 或者进入设置界面左下角<code>打开JSON文件</code></p></li><li><p>编辑其中的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// 修改这里的defaults,增加font</span></span><br><span class="line">            <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> </span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">// 指定字体font.face</span></span><br><span class="line">                <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> </span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="comment">// 我安装的是JetBrainMono字体</span></span><br><span class="line">                    <span class="attr">&quot;face&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JetBrainsMono Nerd Font&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="在vscode中配置字体"><a href="#在vscode中配置字体" class="headerlink" title="在vscode中配置字体"></a>在vscode中配置字体</h4><ul><li><p>打开vscode设置，搜索 <code>terminal:font family</code></p></li><li><p>将使用的字体写入配置中即可</p><p><img src="/./image-20230909133959216.png" alt="image-20230909133959216"></p></li></ul><h3 id="4、配置ohmyposh"><a href="#4、配置ohmyposh" class="headerlink" title="4、配置ohmyposh"></a>4、配置ohmyposh</h3><ul><li><p>配置信息参考官方说明：<a href="https://ohmyposh.dev/docs/installation/prompt">https://ohmyposh.dev/docs/installation/prompt</a></p></li><li><p>打开PowerShell，输入如下命令：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure></li><li><p>编辑文本内容后保存</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\jandedobbeleer.omp.json&quot; | Invoke-Expression</span><br></pre></td></tr></table></figure></li><li><p>修改完毕后执行如下命令使得变更生效</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. $PROFILE</span><br></pre></td></tr></table></figure></li></ul><h3 id="5、配置主题"><a href="#5、配置主题" class="headerlink" title="5、配置主题"></a>5、配置主题</h3><ul><li><p>默认的主题为 <code>jandedobbeleer</code> 我们可以使用如下命令下载并预览所有的可用主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure></li><li><p>上述命令执行后会在命令行中显示所有的可用主题，按住ctrl和链接可以打开对应的配置文件</p></li><li><p>在线查看所有主题的地址为：<a href="https://ohmyposh.dev/docs/themes">https://ohmyposh.dev/docs/themes</a></p></li><li><p>选择想要使用的配置后，将其配置到 <code>$PROFILE</code> 中即可。例如我使用了1_shell.omp.json则修改为如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\1_shell.omp.json&quot; | Invoke-Expression</span><br></pre></td></tr></table></figure></li><li><p>默认情况下的主题，可能也不合自己的喜好，可以自己修改它，具体的语法见官网：<a href="https://ohmyposh.dev/docs/configuration/general">https://ohmyposh.dev/docs/configuration/general</a></p></li><li><p>自定义配置完毕后，可以将当前主题导出到个人目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh config export --output ~/.mytheme.omp.json</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="git中文乱码"><a href="#git中文乱码" class="headerlink" title="git中文乱码"></a>git中文乱码</h3><ul><li><p>当使用git status显示中文路径为乱码时，执行以下脚本配置一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置conda，在ohmyposh中显示当前虚拟环境信息"><a href="#配置conda，在ohmyposh中显示当前虚拟环境信息" class="headerlink" title="配置conda，在ohmyposh中显示当前虚拟环境信息"></a>配置conda，在ohmyposh中显示当前虚拟环境信息</h3><ul><li><p>首先需要安装anaconda，请按官网配置或者搜索相关教程即可</p></li><li><p>在PowerShell中执行 <code>conda init powershell</code> 初始化conda的配置</p></li><li><p>conda的当前虚拟环境信息会保存到环境变量 <code>CONDA_DEFAULT_ENV</code> 中，因此只需要将它配置到主题文件中即可，在template中配置为 <code>.Env.CONDA_DEFAULT_ENV</code> 参考如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;session&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ff9c3f&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123; .UserName &#125;&#125;&lt;#faf88e&gt;[&#123;&#123; .Env.CONDA_DEFAULT_ENV &#125;&#125;] &lt;#ffffff&gt;on&lt;/&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;display_host&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义后的主题预览如下：</p><ul><li>普通目录</li></ul><p><img src="/./image-20230909135628380.png" alt="image-20230909135628380"></p><ul><li>git目录</li></ul><p><img src="/./image-20230909140447569.png" alt="image-20230909140447569"></p></li></ul><h3 id="配置默认PowerShell控制台字体"><a href="#配置默认PowerShell控制台字体" class="headerlink" title="配置默认PowerShell控制台字体"></a>配置默认PowerShell控制台字体</h3><ul><li><p>在菜单右键或者win+x直接打开PowerShell时的控制台程序中，显示的字体也需要进行配置，否则会显示得不正常，但是这个控制台并不能完美支持Nerd Font，因此这里推荐安装一下 <code>更纱黑体</code> github地址：<a href="https://github.com/be5invis/Sarasa-Gothic/releases">https://github.com/be5invis/Sarasa-Gothic/releases</a></p></li><li><p>安装字体之后，win+x打开powershell控制台，点击左上角图标调出菜单点击属性，在字体标签中修改字体为 <code>等距更纱黑体</code></p></li><li><p>配置完毕后可以自行调整字体大小为自己喜欢的，预览如下，缺点是无法显示unicode字符：</p><p><img src="/./image-20230909140245339.png" alt="image-20230909140245339"></p></li><li><p>我当前所使用的自定义主题文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;console_title_template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123; .Folder &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;blocks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prompt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;alignment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;left&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;segments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;status&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plain&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A9FFB4&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground_templates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;&#123;&#123; if gt .Code 0 &#125;&#125;#ef5350&#123;&#123; end &#125;&#125;&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot; \ue286 &quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;always_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;executiontime&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#a9ffb4&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &#123;&#123; .FormattedMs &#125;&#125;s &lt;#ffffff&gt;\ue601&lt;/&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dallas&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;threshold&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot; \uf0e7 &quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;root_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\uf292 &quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sysinfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#94ffa2&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &lt;#ffffff&gt;CPU:&lt;/&gt; &#123;&#123; round .PhysicalPercentUsed .Precision &#125;&#125;% &quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sysinfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#81ff91&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;#ffffff&gt;\ue266&lt;/&gt; &lt;#ffffff&gt;RAM:&lt;/&gt; &#123;&#123; (div ((sub .PhysicalTotalMemory .PhysicalFreeMemory)|float64) 1073741824.0) &#125;&#125;/&#123;&#123; (div .PhysicalTotalMemory 1073741824.0) &#125;&#125;GB &quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prompt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;alignment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;left&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;segments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#faf88e&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;session&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ff9c3f&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123; .UserName &#125;&#125;&lt;#faf88e&gt;[&#123;&#123; .Env.CONDA_DEFAULT_ENV &#125;&#125;] &lt;#ffffff&gt;on&lt;/&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;display_host&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;time&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#bc93ff&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &#123;&#123; .CurrentDate | date .Format &#125;&#125; &quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;time_format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Monday &lt;#ffffff&gt;at&lt;/&gt; 3:04 PM&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ee79d1&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &#123;&#123; .UpstreamIcon &#125;&#125;&#123;&#123; .HEAD &#125;&#125;&#123;&#123;if .BranchStatus &#125;&#125; &#123;&#123; .BranchStatus &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if .Working.Changed &#125;&#125; \uf044 &#123;&#123; .Working.String &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if and (.Working.Changed) (.Staging.Changed) &#125;&#125; |&#123;&#123; end &#125;&#125;&#123;&#123; if .Staging.Changed &#125;&#125; \uf046 &#123;&#123; .Staging.String &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if gt .StashCount 0 &#125;&#125; \ueb4b &#123;&#123; .StashCount &#125;&#125;&#123;&#123; end &#125;&#125; &quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;branch_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\ue725 &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fetch_stash_count&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fetch_status&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fetch_upstream_icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fetch_worktree_count&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;newline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prompt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;alignment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;left&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;segments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;path&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;diamond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#8edbfa&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;trailing_diamond&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;#8edbfa&gt; &gt; &lt;/&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123; .Path &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;folder_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\uf07b&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;folder_separator_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;home_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;home&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;agnoster_full&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;newline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;transient_prompt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FEF5ED&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;transparent&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装PowerShell&quot;&gt;&lt;a href=&quot;#安装PowerShell&quot; class=&quot;headerlink&quot; title=&quot;安装PowerShell&quot;&gt;&lt;/a&gt;安装PowerShell&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;windowns10默认情况下，自带的Power</summary>
      
    
    
    
    
    <category term="Shell" scheme="https://tonyjiangwj.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>相对安全方式保存SSH密码并实现自动登录</title>
    <link href="https://tonyjiangwj.github.io/2021/03/18/%E7%9B%B8%E5%AF%B9%E5%AE%89%E5%85%A8%E6%96%B9%E5%BC%8F%E4%BF%9D%E5%AD%98SSH%E5%AF%86%E7%A0%81%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/"/>
    <id>https://tonyjiangwj.github.io/2021/03/18/%E7%9B%B8%E5%AF%B9%E5%AE%89%E5%85%A8%E6%96%B9%E5%BC%8F%E4%BF%9D%E5%AD%98SSH%E5%AF%86%E7%A0%81%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/</id>
    <published>2021-03-18T12:34:52.000Z</published>
    <updated>2023-09-09T02:37:32.416Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Linux或者Mac上一般都是直接用的终端来连接SSH，基本上很少有类似Windows上用XShell之类的客户端。所以在终端上直接登录都必须输入密码，但是如果密码比较复杂就更难记住了。这时候可以通过SSH-Key来实现秘钥登录。</p><h3 id="SSH-Key登录远程服务器"><a href="#SSH-Key登录远程服务器" class="headerlink" title="SSH-Key登录远程服务器"></a>SSH-Key登录远程服务器</h3><ul><li><p>SSH-Key是一种基于密钥的安全认证，远程服务器持有公钥，本地持有私钥，在客户端向服务器发送请求之后，服务端在用户主目录下查找用户的公钥，然后对比用户发送过来的公钥，如果一致则用公钥加密”质询“并发送给客户端。客户端收到”质询“后用私钥解密，在发送给服务端，认证结束。</p></li><li><p>要实现这种方式的登录首先需要创建ssh-key：</p></li><li><pre><code class="shell">ssh-keygen -t rsa<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- 在交互界面中可以按默认的直接回车，最后会在`$&#123;USER_HOME&#125;/.ssh/`下保存公钥和私钥文件：`id_rsa` `id_rsa.pub`</span><br><span class="line"></span><br><span class="line">- 然后需要将公钥保存到服务器上，执行以下命令即可将公钥发送到服务器上，需要输入登录密码</span><br><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  ssh-copy-id -i ~/.ssh/id_rsa.pub $&#123;user&#125;@$&#123;host&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>以上命令会将公钥文件保存到服务器用户目录下的 <code>.ssh/authorized_keys</code> 中</p></li><li><p>配置完成之后便可以直接免密码登录了 <code>ssh $&#123;user&#125;@$&#123;host&#125;</code></p></li></ul><h4 id="其他扩展配置"><a href="#其他扩展配置" class="headerlink" title="其他扩展配置"></a>其他扩展配置</h4><ul><li><p>有时候可能会需要创建多个不同的秘钥对，用于不同的服务器登陆，或者用于Github的免密操作</p></li><li><p>通过ssh-keygen创建新的文件，此时直接定义新的名字，比如：</p></li><li><pre><code class="shell">ssh-keygen -t rsa -C &#39;另一个服务器&#39; -f ~/.ssh/my_id_rsa<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后同样的将公钥发送到需要登录的服务器</span><br><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  ssh-copy-id -i ~/.ssh/my_id_rsa $&#123;user&#125;@$&#123;host&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>再在登录的时候指定私钥文件，或者通过 <code>~/.ssh/config</code> 自动带上指定的文件</p><ul><li><p>直接指定的方式：<code> ssh $&#123;user&#125;@$&#123;host&#125; -i ~/.ssh/my_id_rsa</code></p></li><li><p>通过配置文件的方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~/.ssh/config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定某一服务器所使用的私钥文件</span></span><br><span class="line">Host serverAlias # 服务器的别名，可以随便起一个 或者直接按ip也可以</span><br><span class="line">HostName $&#123;服务器的ip&#125;</span><br><span class="line">User $&#123;user&#125; # 指定登录用户名</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/my_id_rsa # 指定私钥文件</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="另一种情况"><a href="#另一种情况" class="headerlink" title="另一种情况"></a>另一种情况</h3><ul><li>但是也有些情况下，无法将本地的公钥发送到服务器上，比如登录客户的服务器，或者登录一个IP或者端口可能会变化的服务器，比如我使用了免费的内网穿透来连接我的树莓派，它的端口就会经常变化。</li><li>在这种情况下，登录的时候都得去手动输入密码了。当用户名或者密码很难记住的时候，往往会特别需要一个能够记住用户名密码的客户端。Mac下免费的客户端较少，比如Termius就是一个不错的客户端，但是不知为何它有时候会卡死。所以我选择了自己实现记住密码的方式，可以在登录时只记住一个密码，将不同服务器的密码通过加密保存，登录的时候通过输入解密秘钥来自动解密登录。</li></ul><h3 id="通过加密文件保存服务器密码实现自动登录"><a href="#通过加密文件保存服务器密码实现自动登录" class="headerlink" title="通过加密文件保存服务器密码实现自动登录"></a>通过加密文件保存服务器密码实现自动登录</h3><ul><li><p>通过该方式需要依赖的工具如下：<code>openssl</code> <code>expect</code>, 一般情况下 openssl都是自带了的，往往只需要安装一下expect</p></li><li><p>Mac下可以直接 <code> brew install expect</code></p></li><li><p>Ubuntu 下可以通过apt安装 <code>sudo apt install expect</code></p></li><li><p>expect 是一种交互式的开源工具，用于实现自动化的功能</p></li></ul><h4 id="第一步创建加密方法，保存密码的密文"><a href="#第一步创建加密方法，保存密码的密文" class="headerlink" title="第一步创建加密方法，保存密码的密文"></a>第一步创建加密方法，保存密码的密文</h4><ul><li><p>创建一个func.sh文件，内容如下</p></li><li><pre><code class="shell">#!/bin/bash## 加密方法encrypt() &#123;    local content=$1    local pass=$2    cmd=&quot;echo $content | openssl enc -aes-256-cfb -a -e -pass pass:$pass -iter 12 -nosalt&quot;    echo $content | openssl enc -aes-256-cfb -a -e -pass pass:$pass -iter 12 -nosalt&#125;## 加密工具方法create_encrypted_pass() &#123;    read -s -p &quot;Enter origin password:&quot; content    echo &#39;&#39;    read -s -p &quot;Enter aes password:&quot; pass    echo &#39;&#39;    encrypt $content $pass&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后在终端中 `source func.sh` 加载方法，然后调用 `create_encrypted_pass` 在交互界面中输入密码和加密秘钥，加密秘钥需要牢记于心，以后登录时只需要输入它即可</span><br><span class="line"></span><br><span class="line">- 完成后会打印加密后的密文，将密文保存下来，比如保存到`$&#123;host&#125;.pass` </span><br><span class="line"></span><br><span class="line">#### 第二步创建解密方法，和自动登录的方法</span><br><span class="line"></span><br><span class="line">- 在func.sh中补充解密和登录方法</span><br><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  </span><br><span class="line">  ## 解密方法</span><br><span class="line">  decrypt() &#123;</span><br><span class="line">      local encrypted=$1</span><br><span class="line">      local pass=$2</span><br><span class="line">      echo $encrypted | openssl enc -aes-256-cfb -a -d -pass pass:$pass -iter 12 -nosalt</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ## 登录方法，输入参数有 加密文件路径，用户名，服务器host，（端口，解密秘钥【这两个可选】）</span><br><span class="line">  ssh_target() &#123;</span><br><span class="line">      local pass_path=$1</span><br><span class="line">      local user=$2</span><br><span class="line">      local host=$3</span><br><span class="line">      local port=$4</span><br><span class="line">      local aes_pass=$5</span><br><span class="line">      if [ &quot;$port&quot; == &quot;&quot; ]; then</span><br><span class="line">        port=22</span><br><span class="line">      fi</span><br><span class="line">      encrypted=`cat $pass_path`</span><br><span class="line">      pass=`decrypt $encrypted $aes_pass`</span><br><span class="line">      # echo &quot;decrypted pass is $&#123;pass&#125;&quot;</span><br><span class="line">      ./_ssh.exp $host $user $pass $port</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后创建自动执行脚本，_ssh.exp，用于根据输入参数自动登录到服务器上</p></li><li><pre><code class="shell">#!/usr/bin/expect## 读取参数set host [lindex $argv 0]set user [lindex $argv 1]set password [lindex $argv 2]set port [lindex $argv 3]set timeout 3000spawn ssh -l $user $host -p $portexpect &#123;  # 判断是否有记住hosts的交互信息  &quot;(yes/no?&quot; &#123;    send &quot;yes\r&quot; # 发送yes    expect &#123;      &quot;password:&quot; &#123; send &quot;$&#123;password&#125;\r&quot; &#125; # 发送密码    &#125;  &#125;  &quot;password:&quot; &#123; send &quot;$&#123;password&#125;\r&quot; &#125; # 发送密码&#125;interact<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后只需要在创建一个针对某一服务器的登录脚本，在里面配置一些信息</span><br><span class="line"></span><br><span class="line">- 比如 ssh_my_server.sh</span><br><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  source ./func.sh ## 用于加载预定义的方法</span><br><span class="line">  ssh_target $&#123;hist&#125;.pass $&#123;用户名&#125; $&#123;服务器host&#125; $&#123;端口&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后对以上两个文件赋予可执行权限</p></li><li><p><code>chmod a+x ssh_my_server.sh _ssh.exp</code></p></li></ul><h4 id="第三步，登录服务器"><a href="#第三步，登录服务器" class="headerlink" title="第三步，登录服务器"></a>第三步，登录服务器</h4><ul><li>此时要登录到服务器时，只需要执行 ssh_my_server.sh 即可</li><li><code>./ssh_my_server.sh</code> 然后根据提示输入加密秘钥，这个秘钥牢记于心即可。一般不知道秘钥无法解密出具体的登录密码，所以是比较安全的，在脚本中也不会暴露密码信息。</li></ul><h4 id="额外实现"><a href="#额外实现" class="headerlink" title="额外实现"></a>额外实现</h4><ul><li><p>以上方式，每次执行 <code>./ssh_my_server.sh</code> 都需要输入一遍密码，有时候又觉得有些麻烦。可以稍微再改造一下，在当前终端中不再需要输入密码。实现方式是得到和终端相关的数据，用它作为加密密钥，将记在心里的那个秘钥保存下来。</p></li><li><p>在func.sh中增加有些方法，并修改ssh_target</p></li><li><pre><code class="shell">## 根据终端的信息创建临时秘钥，该方法创建的秘钥只要在当前终端执行，得到的都是同样的内容create_temp_pass() &#123;    local tty_info=`tty`    tty_info=$&#123;tty_info#/dev/*&#125;    local ps_info=`ps -ef | grep $tty_info | awk &#39;NR==1&#123;print $2,$3,$5,$6&#125;&#39;`    local aes_pass=`echo $ps_info | md5`    echo $aes_pass&#125;## 从加密文件中解密出明文密码get_session_aes_pass() &#123;    local work_dir=`pwd`    local temp_pass_dir=&quot;$work_dir/.pass&quot;    local aes_pass=&#39;&#39;    # 判断是否存在加密文件，不存在则返回空内容    if test -e $temp_pass_dir ; then        local encrypted_aes_pass=`cat $temp_pass_dir`        local temp_aes_pass=`create_temp_pass`        # 判断密文解密的合法性，我在明文中加入了_123后缀，只有后缀匹配才能确定解密是成功的，否则解密失败返回空内容        local decrypted_aes_pass=`decrypt $encrypted_aes_pass $temp_aes_pass`        if [ &quot;$&#123;decrypted_aes_pass#*_&#125;&quot; == &quot;123&quot; ]; then            aes_pass=$&#123;decrypted_aes_pass%_123&#125;        fi    fi    echo $aes_pass&#125;## 将明文密码保存到加密文件中save_session_aes_pass() &#123;    local work_dir=`pwd`    local temp_pass_dir=&quot;$work_dir/.pass&quot;    local aes_pass=$1    local temp_aes_pass=`create_temp_pass`    # 在明文中加入_123后缀，然后加密到加密文件中    local encrypted_aes_pass=`encrypt &quot;$&#123;aes_pass&#125;_123&quot; $temp_aes_pass`    echo $encrypted_aes_pass &gt; $temp_pass_dir&#125;ssh_target() &#123;    local pass_path=$1    local user=$2    local host=$3    local port=$4    local aes_pass=$5    if [ &quot;$port&quot; == &quot;&quot; ]; then      port=22    fi    encrypted=`cat $pass_path`        # 这里增加判断，如果传入的解密密码为空，    if [ &quot;$aes_pass&quot; == &quot;&quot; ]; then        aes_pass=`get_session_aes_pass`        # 第二次判断，如果解密出的内容为空，则需要重新输入解密的秘钥        if [ &quot;$aes_pass&quot; == &quot;&quot; ]; then            read -s -p &#39;please enter aes password:&#39; aes_pass            echo &#39;&#39;            # 将秘钥明文加密保存            `save_session_aes_pass $aes_pass`        fi    fi    pass=`decrypt $encrypted $aes_pass`    # echo &quot;decrypted pass is $&#123;pass&#125;&quot;    ../libs/_ssh.exp $host $user $pass $port&#125;</code></pre></li><li><p>然后在同一个终端中，只在第一次执行 <code>ssh_my_server.sh</code> 的时候需要输入密码，在后续的操作中不再需要输入密码。当重新打开一个终端时，才会要求再次输入密码。</p></li><li><p>当需要登录多个不同的服务器时，可以创建多个不同的ssh_my_server.sh文件，顺序分别是先创建登录密码的加密文件，然后在ssh_my_server.sh文件中配置加密文件位置和服务器登录名，host，端口等信息。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;Linux或者Mac上一般都是直接用的终端来连接SSH，基本上很少有类似Windows上用XShell之类的客户端。所以在终端上直接登录都必</summary>
      
    
    
    
    
    <category term="Shell" scheme="https://tonyjiangwj.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>将opencv-android-sdk打包成aar文件</title>
    <link href="https://tonyjiangwj.github.io/2021/01/07/%E5%B0%86opencv-android-sdk%E6%89%93%E5%8C%85%E6%88%90aar%E6%96%87%E4%BB%B6/"/>
    <id>https://tonyjiangwj.github.io/2021/01/07/%E5%B0%86opencv-android-sdk%E6%89%93%E5%8C%85%E6%88%90aar%E6%96%87%E4%BB%B6/</id>
    <published>2021-01-07T02:11:34.000Z</published>
    <updated>2023-09-09T02:37:32.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文介绍的是如何将opencv-android-sdk打包成aar文件，以便作为lib包导入到现有项目中"><a href="#本文介绍的是如何将opencv-android-sdk打包成aar文件，以便作为lib包导入到现有项目中" class="headerlink" title="本文介绍的是如何将opencv-android-sdk打包成aar文件，以便作为lib包导入到现有项目中"></a>本文介绍的是如何将opencv-android-sdk打包成aar文件，以便作为lib包导入到现有项目中</h3><h4 id="第一步、下载opencv-android-sdk"><a href="#第一步、下载opencv-android-sdk" class="headerlink" title="第一步、下载opencv-android-sdk"></a>第一步、下载opencv-android-sdk</h4><ul><li>前往opencv官网<a href="https://opencv.org/releases/">https://opencv.org/releases/</a> 下载对应版本的Android-sdk.zip，然后解压备用。</li><li>这里不管是4.x还是3.x都可以，后续步骤是一样的</li></ul><h4 id="第二步、创建一个空的项目"><a href="#第二步、创建一个空的项目" class="headerlink" title="第二步、创建一个空的项目"></a>第二步、创建一个空的项目</h4><ul><li><p>打开Android Studio，create new project 随便选一个Empty Activity然后第二页随便写名称，minimun sdk选择21以上即可</p></li><li><p><img src="/./image-20210107105812677.png" alt="image-20210107105812677"></p></li><li><p>创建完毕之后，通过菜单new module, 选择Android Library</p></li><li><p><img src="/./image-20210107110114611.png" alt="image-20210107110114611"></p></li><li><p>填写Android Library信息，同样选择Mininum SDK为21以上，其他的可以随便写，我这里包名写成org.opencv</p></li><li><p><img src="/./image-20210107110305985.png" alt="image-20210107110305985"></p></li><li><p>右键opencv模块，创建AIDL文件夹</p></li><li><p><img src="/./image-20210107110526376.png" alt="image-20210107110526376"></p></li></ul><h4 id="第三步、复制SDK源代码到项目中"><a href="#第三步、复制SDK源代码到项目中" class="headerlink" title="第三步、复制SDK源代码到项目中"></a>第三步、复制SDK源代码到项目中</h4><ul><li><p>为了方便查看目录结构，切换为Project</p></li><li><p><img src="/./image-20210107111122256.png" alt="image-20210107111122256"></p></li><li><p>将 <code>[opencv-sdk-dir]/sdk/java/src/org/opencv/engine/OpenCVEngineInterface.aidl</code> 文件复制到 <code>[opencv-module]/src/main/aidl/org/opencv/engine/OpenCVEngineInterface.aidl</code> </p></li><li><p>将 <code>[opencv-sdk-dir]/sdk/java/src/</code> 下的文件夹复制到 <code>[opencv-module]/src/main/java</code> </p></li><li><p>将  <code>[opencv-sdk-dir]/sdk/native/libs/</code> 下的<code>arm64-v8a</code> <code>armeabi-v7</code> 文件夹复制到 <code>[opencv-module]/src/main/jniLibs</code> 。作为aar打包，这一步是可选的，因为加入后会增加打包体积，可以后续直接在引用项目中再添加对应的so文件</p></li><li><p>将  <code>[opencv-sdk-dir]/sdk/java/res/values/attrs.xml</code> 文件复制到 <code>[opencv-module]/src/main/res/values/attrs.xml</code> </p></li><li><p>完成后的目录如下</p></li><li><p><img src="/./image-20210107112737237.png" alt="image-20210107112737237"></p></li><li><p>然后修改[opencv-module]&#x2F;build.gradle 增加lintOptions 避免lint报错打断打包进程</p></li><li><p><img src="/./image-20210107112320456.png" alt="image-20210107112320456"></p></li></ul><h4 id="第四步、打包aar文件"><a href="#第四步、打包aar文件" class="headerlink" title="第四步、打包aar文件"></a>第四步、打包aar文件</h4><ul><li><p>运行 gradle task build，双击build即可</p></li><li><p><img src="/./image-20210107112429830.png" alt="image-20210107112429830"></p></li><li><p>打包完成后aar文件在 <code>[opencv-module]/build/outputs/aar/</code> 目录下，本教程直接跳过了jniLibs，打包体积在几百kB左右</p></li><li><p><img src="/./image-20210107113350607.png" alt="image-20210107113350607"></p></li><li><p>如果需要将jniLibs一起打包，可能需要在build.gradle中配置ndk.version为本地已安装的版本 否则可能报错</p></li><li><p><img src="/./image-20210107114148997.png" alt="image-20210107114148997"></p></li><li><p>这样打包后的aar文件大概有十几MB</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;本文介绍的是如何将opencv-android-sdk打包成aar文件，以便作为lib包导入到现有项目中&quot;&gt;&lt;a href=&quot;#本文介绍的是如何将opencv-android-sdk打包成aar文件，以便作为lib包导入到现有项目中&quot; class=&quot;headerl</summary>
      
    
    
    
    
    <category term="Java" scheme="https://tonyjiangwj.github.io/tags/Java/"/>
    
    <category term="Android" scheme="https://tonyjiangwj.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>自建kms服务器并通过docker部署</title>
    <link href="https://tonyjiangwj.github.io/2020/07/21/%E8%87%AA%E5%BB%BAkms%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E9%80%9A%E8%BF%87docker%E9%83%A8%E7%BD%B2/"/>
    <id>https://tonyjiangwj.github.io/2020/07/21/%E8%87%AA%E5%BB%BAkms%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E9%80%9A%E8%BF%87docker%E9%83%A8%E7%BD%B2/</id>
    <published>2020-07-21T12:08:39.000Z</published>
    <updated>2023-09-09T02:37:32.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过docker创建自己的kms服务容器，并部署到Linux服务器或者树莓派上"><a href="#通过docker创建自己的kms服务容器，并部署到Linux服务器或者树莓派上" class="headerlink" title="通过docker创建自己的kms服务容器，并部署到Linux服务器或者树莓派上"></a>通过docker创建自己的kms服务容器，并部署到Linux服务器或者树莓派上</h1><ul><li>本教程实现了基于docker创建自己的 kms 容器，并实现开机自启动的功能</li><li>kms脚本来自<a href="https://github.com/dakkidaze/one-key-kms.git">https://github.com/dakkidaze/one-key-kms.git</a></li></ul><h3 id="首先进入home创建文件夹"><a href="#首先进入home创建文件夹" class="headerlink" title="首先进入home创建文件夹"></a>首先进入home创建文件夹</h3><ul><li><code>mkdir ~/kms-tmp &amp;&amp; cd ~/kms-tmp</code></li></ul><h3 id="下载kms脚本"><a href="#下载kms脚本" class="headerlink" title="下载kms脚本"></a>下载kms脚本</h3><ul><li><code>git clone https://github.com/dakkidaze/one-key-kms.git</code></li></ul><h3 id="创建临时容器"><a href="#创建临时容器" class="headerlink" title="创建临时容器"></a>创建临时容器</h3><ul><li><code>vim Dockerfile</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM arm32v7/ubuntu:18.04</span><br><span class="line">COPY one-key-kms /home/root/one-key-kms</span><br><span class="line">WORKDIR /home/root/one-key-kms</span><br><span class="line">RUN apt update &amp;&amp; apt install vim -y &amp;&amp; apt install curl -y</span><br><span class="line">RUN chmod a+x *.sh</span><br><span class="line"></span><br><span class="line">RUN echo &quot;done kms!&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><ul><li><code>docker build . -t kms-tmp:v1</code></li></ul><h3 id="运行创建的容器"><a href="#运行创建的容器" class="headerlink" title="运行创建的容器"></a>运行创建的容器</h3><ul><li><code>docker run -it kms-tmp:v1</code></li><li>执行 <code>./one-key-kms-debian.sh</code> 进行安装，自动下载依赖的组件</li></ul><h3 id="完成后手动退出容器，将容器创建为镜像"><a href="#完成后手动退出容器，将容器创建为镜像" class="headerlink" title="完成后手动退出容器，将容器创建为镜像"></a>完成后手动退出容器，将容器创建为镜像</h3><ul><li><code>docker commit $container_id kms/kms-tmp</code></li></ul><h3 id="开始创建kms镜像"><a href="#开始创建kms镜像" class="headerlink" title="开始创建kms镜像"></a>开始创建kms镜像</h3><ul><li><code>mkdir ~/kms &amp;&amp; cd ~/kms</code></li><li><code>vim start_kms.sh</code></li><li><pre><code class="shell">#!/bin/bash/home/root/one-key-kms/kms.sh start ## 阻塞主程序 防止docker容器启动后退出watch -n 100 -d &#39;df -h&#39;  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- ` vim Dockerfile ` 编写Dockerfile 需要暴露 1688 端口</span><br><span class="line">  ```shell</span><br><span class="line">  FROM kms/kms-tmp:latest </span><br><span class="line">  WORKDIR /home/root/one-key-kms</span><br><span class="line">  COPY start_kms.sh /home/root/one-key-kms</span><br><span class="line">  RUN chmod a+x start_kms.sh</span><br><span class="line">  EXPOSE 1688</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="容器创建完成之后运行即可"><a href="#容器创建完成之后运行即可" class="headerlink" title="容器创建完成之后运行即可"></a>容器创建完成之后运行即可</h3><ul><li><pre><code class="shell">docker run -dit -p 1688:1688 \--name kms \--entrypoint &quot;/home/root/one-key-kms/start_kms.sh&quot; \--restart=alwayskms:v1</code></pre></li><li><code>--restart=always</code> 是指定容器自动启动</li></ul><h2 id="windows下激活脚本"><a href="#windows下激活脚本" class="headerlink" title="windows下激活脚本"></a>windows下激活脚本</h2><ul><li><p>进入system32目录下 <code>cd %SystemRoot%/system32</code></p></li><li><p>设置服务器ip</p></li><li><p><code>slmgr /skms kms服务器ip</code></p></li><li><p>激活产品</p></li><li><p><code>slmgr /ato</code></p></li><li><p>查看激活信息</p></li><li><p><code>slmgr /xpr</code></p></li></ul><h2 id="office激活"><a href="#office激活" class="headerlink" title="office激活"></a>office激活</h2><h3 id="进入安装目录"><a href="#进入安装目录" class="headerlink" title="进入安装目录"></a>进入安装目录</h3><ul><li>设置激活服务器</li><li><code>cscript ospp.vbs /sethst:$kmsip</code></li><li>激活产品</li><li><code>cscript ospp.vbs /act</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过docker创建自己的kms服务容器，并部署到Linux服务器或者树莓派上&quot;&gt;&lt;a href=&quot;#通过docker创建自己的kms服务容器，并部署到Linux服务器或者树莓派上&quot; class=&quot;headerlink&quot; title=&quot;通过docker创建自己的k</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Protobuf实现跨语言序列化和反序列化，Java&amp;Python实例</title>
    <link href="https://tonyjiangwj.github.io/2019/11/01/%E4%BD%BF%E7%94%A8Protobuf%E5%AE%9E%E7%8E%B0%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%8CJava-Python%E5%AE%9E%E4%BE%8B/"/>
    <id>https://tonyjiangwj.github.io/2019/11/01/%E4%BD%BF%E7%94%A8Protobuf%E5%AE%9E%E7%8E%B0%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%8CJava-Python%E5%AE%9E%E4%BE%8B/</id>
    <published>2019-11-01T05:46:27.000Z</published>
    <updated>2023-09-09T02:37:32.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用protobuf实现跨语言序列化-Java和Python实例"><a href="#使用protobuf实现跨语言序列化-Java和Python实例" class="headerlink" title="使用protobuf实现跨语言序列化 Java和Python实例"></a>使用protobuf实现跨语言序列化 Java和Python实例</h2><h3 id="首先下载安装protoc"><a href="#首先下载安装protoc" class="headerlink" title="首先下载安装protoc"></a>首先下载安装protoc</h3><ul><li><a href="https://github.com/protocolbuffers/protobuf/releases">github.releases</a></li><li>对于OS X可以通过brew直接安装 <code> brew install protobuf</code> </li><li>安装完可以通过<code>protoc --version</code>查看版本信息</li></ul><h3 id="创建proto文件-带Any类型的版本"><a href="#创建proto文件-带Any类型的版本" class="headerlink" title="创建proto文件-带Any类型的版本"></a>创建proto文件-带Any类型的版本</h3><h4 id="带Any类型的只能导出pb2类型的Python文件，没法导出Python3-的版本，暂时不知道如何解决"><a href="#带Any类型的只能导出pb2类型的Python文件，没法导出Python3-的版本，暂时不知道如何解决" class="headerlink" title="带Any类型的只能导出pb2类型的Python文件，没法导出Python3 的版本，暂时不知道如何解决"></a>带Any类型的只能导出pb2类型的Python文件，没法导出Python3 的版本，暂时不知道如何解决</h4><ul><li><p>Any类型的字段可以在java中实现泛型的功能</p></li><li><p>MessageDto.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;google/protobuf/any.proto&quot;</span>;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">MessageDto</span> &#123;</span><br><span class="line"><span class="type">string</span> action=<span class="number">1</span>;</span><br><span class="line"><span class="type">int32</span> statte=<span class="number">2</span>;</span><br><span class="line">google.protobuf.Any data=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RpcCmd.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;MessageDto.proto&quot;</span>;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">RpcCmd</span> &#123;</span><br><span class="line">MessageDto message=<span class="number">1</span>;</span><br><span class="line"><span class="type">string</span> randomKey=<span class="number">2</span>;</span><br><span class="line"><span class="type">string</span> remoteAddressKey=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Point2PointMessage.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">Point2PointMessage</span> &#123;</span><br><span class="line"><span class="type">string</span> targetAddressKey;</span><br><span class="line"><span class="type">string</span> message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>BytesData.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">BytesData</span> &#123;</span><br><span class="line">    <span class="type">bytes</span> content=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="导出相应的对象定义文件"><a href="#导出相应的对象定义文件" class="headerlink" title="导出相应的对象定义文件"></a>导出相应的对象定义文件</h3><h4 id="Python版"><a href="#Python版" class="headerlink" title="Python版"></a>Python版</h4><ul><li><p><code>protoc --python_out=./gen_pb2 RpcCmd.proto MessageDto.proto Point2PointMessage.proto BytesData.proto</code> </p></li><li><p>生成的文件名为XXX_pb2.py</p></li></ul><h4 id="Java版"><a href="#Java版" class="headerlink" title="Java版"></a>Java版</h4><ul><li><p><code>protoc --java_out=./gen_java RpcCmd.proto MessageDto.proto Point2PointMessage.proto BytesData.proto </code></p></li><li><p>生成的文件名为XXXOuterClass.java</p></li></ul><h3 id="在Python中使用"><a href="#在Python中使用" class="headerlink" title="在Python中使用"></a>在Python中使用</h3><ul><li><p>首先要导入生成的文件，放到自己喜欢的包下，然后修改导入包的地址，比如RpcCmd_pb2.py中修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tony.proto.py2.MessageDto_pb2 <span class="keyword">as</span> MessageDto__pb2</span><br></pre></td></tr></table></figure></li><li><p>然后开始使用  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> com.tony.proto.py2 <span class="keyword">import</span> RpcCmd_pb2, Point2PointMessage_pb2, BytesData_pb2, MessageDto_pb2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serialize_to_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    p2p_msg = Point2PointMessage_pb2.Point2PointMessage()</span><br><span class="line">    p2p_msg.message = <span class="string">&quot;Hello, p2p from python&quot;</span></span><br><span class="line">    p2p_msg.targetAddressKey = <span class="string">&quot;/127.0.0.1:38211&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># bytes_data = BytesData_pb2.BytesData()</span></span><br><span class="line">    <span class="comment"># bytes_data.content = b&quot;Hello, bytes data from python&quot;</span></span><br><span class="line"></span><br><span class="line">    rpc_cmd = RpcCmd_pb2.RpcCmd()</span><br><span class="line">    rpc_cmd.randomKey = <span class="string">&quot;random-key-key-random&quot;</span></span><br><span class="line">    rpc_cmd.remoteAddressKey = <span class="string">&quot;/127.0.0.1:1234&quot;</span></span><br><span class="line">    rpc_cmd.message.action = <span class="string">&quot;p2p&quot;</span></span><br><span class="line">    rpc_cmd.message.state = <span class="number">100</span></span><br><span class="line">    rpc_cmd.message.data.Pack(p2p_msg)</span><br><span class="line">    <span class="comment"># rpc_cmd.message.data.Pack(bytes_data)</span></span><br><span class="line"></span><br><span class="line">    bytes_write = rpc_cmd.SerializeToString()</span><br><span class="line"></span><br><span class="line">    fw = <span class="built_in">open</span>(file_path, mode=<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    fw.write(bytes_write)</span><br><span class="line">    fw.flush()</span><br><span class="line">    fw.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;write bytes to file:&quot;</span>, bytes_write)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deserialize_from_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    fo = <span class="built_in">open</span>(file_path, mode=<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    bytes_read = fo.read()</span><br><span class="line">    fo.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;read bytes from file:&quot;</span>, bytes_read)</span><br><span class="line">    rpc_cmd = RpcCmd_pb2.RpcCmd()</span><br><span class="line">    rpc_cmd.ParseFromString(bytes_read)</span><br><span class="line">    <span class="built_in">print</span>(rpc_cmd)</span><br><span class="line"></span><br><span class="line">    p2p_msg = Point2PointMessage_pb2.Point2PointMessage()</span><br><span class="line">    <span class="comment"># bytes_data = BytesData_pb2.BytesData()</span></span><br><span class="line">    <span class="comment"># rpc_cmd.message.data.Unpack(bytes_data)</span></span><br><span class="line">    rpc_cmd.message.data.Unpack(p2p_msg)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;msg_content:&quot;</span>, p2p_msg.message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;msg_target:&quot;</span>, p2p_msg.targetAddressKey)</span><br><span class="line">    <span class="comment"># print(&quot;bytes_data:&quot;, str(bytes_data.content, &#x27;utf-8&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    serialize_file_path = <span class="string">&quot;/trans-data-pb2.dat&quot;</span></span><br><span class="line">    serialize_to_file(serialize_file_path)</span><br><span class="line">    deserialize_from_file(serialize_file_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>执行结果如下，可以将bytes_data相关的注释取消同时注释掉p2p_msg相关的测试BytesData类型的序列化和反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">write bytes to file: b&#x27;\n]\n\x03p2p\x10d\x1aT\n&amp;type.googleapis.com/Point2PointMessage\x12*\n\x10/127.0.0.1:38211\x12\x16Hello, p2p from python\x12\x15random-key-key-random\x1a\x0f/127.0.0.1:1234&#x27;</span><br><span class="line">read bytes from file: b&#x27;\n]\n\x03p2p\x10d\x1aT\n&amp;type.googleapis.com/Point2PointMessage\x12*\n\x10/127.0.0.1:38211\x12\x16Hello, p2p from python\x12\x15random-key-key-random\x1a\x0f/127.0.0.1:1234&#x27;</span><br><span class="line">message &#123;</span><br><span class="line">  action: &quot;p2p&quot;</span><br><span class="line">  state: 100</span><br><span class="line">  data &#123;</span><br><span class="line">    type_url: &quot;type.googleapis.com/Point2PointMessage&quot;</span><br><span class="line">    value: &quot;\n\020/127.0.0.1:38211\022\026Hello, p2p from python&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">randomKey: &quot;random-key-key-random&quot;</span><br><span class="line">remoteAddressKey: &quot;/127.0.0.1:1234&quot;</span><br><span class="line"></span><br><span class="line">msg_content: Hello, p2p from python</span><br><span class="line">msg_target: /127.0.0.1:38211</span><br></pre></td></tr></table></figure></li></ul><h3 id="在Java中使用"><a href="#在Java中使用" class="headerlink" title="在Java中使用"></a>在Java中使用</h3><ul><li><p>同样导入到喜欢的包下，修改对应的包名即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProtobufSerializeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serializeToFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Point2PointMessageOuterClass.Point2PointMessage.<span class="type">Builder</span> <span class="variable">p2pMsgBuilder</span> <span class="operator">=</span> Point2PointMessageOuterClass.Point2PointMessage.newBuilder();</span><br><span class="line">        p2pMsgBuilder.setTargetAddressKey(<span class="string">&quot;/127.0.0.1:1233&quot;</span>);</span><br><span class="line">        p2pMsgBuilder.setMessage(<span class="string">&quot;hello from java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        BytesDataOuterClass.BytesData.Builder bytesBuilder = BytesDataOuterClass.BytesData.newBuilder();</span></span><br><span class="line"><span class="comment">//        bytesBuilder.setContent(ByteString.copyFrom(&quot;bytes data from java&quot;.getBytes(StandardCharsets.UTF_8)));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        MessageDtoOuterClass.MessageDto.<span class="type">Builder</span> <span class="variable">messageBuilder</span> <span class="operator">=</span> MessageDtoOuterClass.MessageDto.newBuilder();</span><br><span class="line">        messageBuilder.setAction(<span class="string">&quot;p2p&quot;</span>);</span><br><span class="line">        messageBuilder.setState(<span class="number">100</span>);</span><br><span class="line">        messageBuilder.setData(Any.pack(p2pMsgBuilder.build()));</span><br><span class="line"><span class="comment">//        messageBuilder.setData(Any.pack(bytesBuilder.build()));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RpcCmdOuterClass.RpcCmd.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> RpcCmdOuterClass.RpcCmd.newBuilder();</span><br><span class="line">        builder.setRandomKey(<span class="string">&quot;RANDOM_KEY_JAVA&quot;</span>);</span><br><span class="line">        builder.setRemoteAddressKey(<span class="string">&quot;/127.0.0.1:1234&quot;</span>);</span><br><span class="line">        builder.setMessage(messageBuilder.build());</span><br><span class="line"></span><br><span class="line">        builder.build().writeTo(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;java_protobuf.dat&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deserializeFromFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        RpcCmdOuterClass.<span class="type">RpcCmd</span> <span class="variable">rpcCmd</span> <span class="operator">=</span> RpcCmdOuterClass.RpcCmd.parseFrom(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;java_protobuf.dat&quot;</span>));</span><br><span class="line">        Point2PointMessageOuterClass.<span class="type">Point2PointMessage</span> <span class="variable">p2pMsg</span> <span class="operator">=</span> rpcCmd.getMessage().getData().unpack(Point2PointMessageOuterClass.Point2PointMessage.class);</span><br><span class="line"><span class="comment">//        BytesDataOuterClass.BytesData bytesData = rpcCmd.getMessage().getData().unpack(BytesDataOuterClass.BytesData.class);</span></span><br><span class="line">        log.info(<span class="string">&quot;deserialize rpcCmd: \n&#123;&#125;&quot;</span>, rpcCmd);</span><br><span class="line">        log.info(<span class="string">&quot;deserialize p2pMsg: \n&#123;&#125;&quot;</span>, p2pMsg);</span><br><span class="line"><span class="comment">//        log.info(&quot;deserialize bytesData: \n&#123;&#125;&quot;, bytesData);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行结果，可以将bytes_data相关的注释取消同时注释掉p2p_msg相关的测试BytesData类型的序列化和反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">10:22:03.118 [main] INFO com.tony.proto.ProtobufSerializeDemo - deserialize rpcCmd: </span><br><span class="line">message &#123;</span><br><span class="line">  action: &quot;p2p&quot;</span><br><span class="line">  state: 100</span><br><span class="line">  data &#123;</span><br><span class="line">    type_url: &quot;type.googleapis.com/Point2PointMessage&quot;</span><br><span class="line">    value: &quot;\n\017/127.0.0.1:1233\022\017hello from java&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">randomKey: &quot;RANDOM_KEY_JAVA&quot;</span><br><span class="line">remoteAddressKey: &quot;/127.0.0.1:1234&quot;</span><br><span class="line"></span><br><span class="line">10:22:03.168 [main] INFO com.tony.proto.ProtobufSerializeDemo - deserialize p2pMsg: </span><br><span class="line">targetAddressKey: &quot;/127.0.0.1:1233&quot;</span><br><span class="line">message: &quot;hello from java&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="然后是Java和Python之间互相序列化和反序列化"><a href="#然后是Java和Python之间互相序列化和反序列化" class="headerlink" title="然后是Java和Python之间互相序列化和反序列化"></a>然后是Java和Python之间互相序列化和反序列化</h3><ul><li>只需要修改对应的文件地址就可以进行测试</li></ul><h5 id="Python反序列化Java"><a href="#Python反序列化Java" class="headerlink" title="Python反序列化Java"></a>Python反序列化Java</h5>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java_serialize_file_path = $path_to_java_serialized$</span><br><span class="line">deserialize_from_file(java_serialize_file_path)</span><br></pre></td></tr></table></figure><ul><li><p>执行结果，这里演示的是BytesData类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">read bytes from file: b&#x27;\n@\n\x03p2p\x10d\x1a7\n\x1dtype.googleapis.com/BytesData\x12\x16\n\x14bytes data from java\x12\x0fRANDOM_KEY_JAVA\x1a\x0f/127.0.0.1:1234&#x27;</span><br><span class="line">message &#123;</span><br><span class="line">  action: &quot;p2p&quot;</span><br><span class="line">  state: 100</span><br><span class="line">  data &#123;</span><br><span class="line">    type_url: &quot;type.googleapis.com/BytesData&quot;</span><br><span class="line">    value: &quot;\n\024bytes data from java&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">randomKey: &quot;RANDOM_KEY_JAVA&quot;</span><br><span class="line">remoteAddressKey: &quot;/127.0.0.1:1234&quot;</span><br><span class="line"></span><br><span class="line">bytes_data: bytes data from java</span><br></pre></td></tr></table></figure></li></ul><h5 id="Java反序列化Python"><a href="#Java反序列化Python" class="headerlink" title="Java反序列化Python"></a>Java反序列化Python</h5>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deserializeFromPythonFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        RpcCmdOuterClass.<span class="type">RpcCmd</span> <span class="variable">rpcCmd</span> <span class="operator">=</span> RpcCmdOuterClass.RpcCmd.parseFrom(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>($path_to_python_serialize$));</span><br><span class="line"><span class="comment">//        Point2PointMessageOuterClass.Point2PointMessage p2pMsg = rpcCmd.getMessage().getData().unpack(Point2PointMessageOuterClass.Point2PointMessage.class);</span></span><br><span class="line">        BytesDataOuterClass.<span class="type">BytesData</span> <span class="variable">bytesData</span> <span class="operator">=</span> rpcCmd.getMessage().getData().unpack(BytesDataOuterClass.BytesData.class);</span><br><span class="line">        log.info(<span class="string">&quot;deserialize rpcCmd: \n&#123;&#125;&quot;</span>, rpcCmd);</span><br><span class="line"><span class="comment">//        log.info(&quot;deserialize p2pMsg: \n&#123;&#125;&quot;, p2pMsg);</span></span><br><span class="line">        log.info(<span class="string">&quot;deserialize bytesData: \n&#123;&#125;&quot;</span>, bytesData);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>执行结果，同样是BytesData类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">10:33:03.360 [main] INFO com.tony.proto.ProtobufSerializeDemo - deserialize rpcCmd: </span><br><span class="line">message &#123;</span><br><span class="line">  action: &quot;p2p&quot;</span><br><span class="line">  state: 100</span><br><span class="line">  data &#123;</span><br><span class="line">    type_url: &quot;type.googleapis.com/BytesData&quot;</span><br><span class="line">    value: &quot;\n\035Hello, bytes data from python&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">randomKey: &quot;random-key-key-random&quot;</span><br><span class="line">remoteAddressKey: &quot;/127.0.0.1:1234&quot;</span><br><span class="line"></span><br><span class="line">10:33:03.402 [main] INFO com.tony.proto.ProtobufSerializeDemo - deserialize bytesData: </span><br><span class="line">content: &quot;Hello, bytes data from python&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="在Java平台，还有个更好用的工具可以不用手写proto文件"><a href="#在Java平台，还有个更好用的工具可以不用手写proto文件" class="headerlink" title="在Java平台，还有个更好用的工具可以不用手写proto文件"></a>在Java平台，还有个更好用的工具可以不用手写proto文件</h3><ul><li><p>这个工具是io.protostuff</p></li><li><p>通过maven导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.protostuff<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protostuff-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.protostuff<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protostuff-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.objenesis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>objenesis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="创建序列化工具类"><a href="#创建序列化工具类" class="headerlink" title="创建序列化工具类"></a>创建序列化工具类</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.protostuff.LinkedBuffer;</span><br><span class="line"><span class="keyword">import</span> io.protostuff.ProtobufIOUtil;</span><br><span class="line"><span class="keyword">import</span> io.protostuff.Schema;</span><br><span class="line"><span class="keyword">import</span> io.protostuff.runtime.DefaultIdStrategy;</span><br><span class="line"><span class="keyword">import</span> io.protostuff.runtime.RuntimeSchema;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.Objenesis;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.ObjenesisStd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于Protostuff优化版的ProtobufIOUtil实现序列化，理论上可以支持跨语言序列化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiangwenjie 2019/10/30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProtobufSerializer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Objenesis</span> <span class="variable">OBJENESIS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjenesisStd</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ProtobufSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ProtobufSerializer</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtobufSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ProtobufSerializer <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ProtobufSerializer.SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj, OutputStream outputStream)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="type">LinkedBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Schema</span> <span class="variable">schema</span> <span class="operator">=</span> getSchema(clz);</span><br><span class="line">            ProtobufIOUtil.writeTo(outputStream, obj, schema, buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;序列化对象失败&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(Object obj) &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="type">LinkedBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">arrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">            <span class="type">Schema</span> <span class="variable">schema</span> <span class="operator">=</span> getSchema(clz);</span><br><span class="line">            ProtobufIOUtil.writeTo(arrayOutputStream, obj, schema, buffer);</span><br><span class="line">            <span class="keyword">return</span> arrayOutputStream.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;序列化对象失败&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deSerialize</span><span class="params">(InputStream inputStream, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">object</span> <span class="operator">=</span> OBJENESIS.newInstance(clazz);</span><br><span class="line">        Schema&lt;T&gt; schema = getSchema(clazz);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ProtobufIOUtil.mergeFrom(inputStream, object, schema);</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;反序列化对象失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deSerialize</span><span class="params">(<span class="type">byte</span>[] param, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">object</span> <span class="operator">=</span> OBJENESIS.newInstance(clazz);</span><br><span class="line">        Schema&lt;T&gt; schema = getSchema(clazz);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ByteArrayInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(param)) &#123;</span><br><span class="line">            ProtobufIOUtil.mergeFrom(inputStream, object, schema);</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;反序列化对象失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; Schema&lt;T&gt; <span class="title function_">getSchema</span><span class="params">(Class&lt;T&gt; clz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RuntimeSchema.createFrom(clz, <span class="keyword">new</span> <span class="title class_">DefaultIdStrategy</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建序列化对象"><a href="#创建序列化对象" class="headerlink" title="创建序列化对象"></a>创建序列化对象</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiangwenjie 2019/10/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcCmd</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MessageDto message;</span><br><span class="line">    <span class="keyword">private</span> String randomKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标地址，不需要序列化传输</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String remoteAddressKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tony.constants.EnumNettyState;</span><br><span class="line"><span class="keyword">import</span> com.tony.serializer.impl.ProtobufSerializer;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiangwenjie 2019/10/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageDto</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String action;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨语言使用Protostuff中提供的protobuff序列化传递复杂对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] bytesData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Serializable serialData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">dataOfClazz</span><span class="params">(Class&lt;T&gt; clazz, <span class="type">boolean</span> isStuff)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isStuff) &#123;</span><br><span class="line">            <span class="keyword">return</span> serialDataOfClazz(clazz);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bytesDataOfClass(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T object, <span class="type">boolean</span> isStuff)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isStuff) &#123;</span><br><span class="line">            setSerialData(object);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setBytesData(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">serialDataOfClazz</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (serialData == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (clazz.isInstance(serialData)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T)serialData;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;data is not instance of class:&quot;</span> + clazz.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">bytesDataOfClass</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytesData == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ProtobufSerializer.getInstance().deSerialize(bytesData, clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;反序列化data对象失败，请确认对象是否为：&#123;&#125; 类型&quot;</span>, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; <span class="keyword">void</span> <span class="title function_">setBytesData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytesData = ProtobufSerializer.getInstance().serialize(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点对点通信data对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiangwenjie 2019/10/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Point2PointMessage</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String targetAddressKey;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="序列化测试"><a href="#序列化测试" class="headerlink" title="序列化测试"></a>序列化测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiangwenjie 2019/11/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaProtostuffSerializeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serializeToFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Point2PointMessage</span> <span class="variable">p2pMsg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point2PointMessage</span>();</span><br><span class="line">        p2pMsg.setTargetAddressKey(<span class="string">&quot;/127.0.0.1:1233&quot;</span>);</span><br><span class="line">        p2pMsg.setMessage(<span class="string">&quot;message from java&quot;</span>);</span><br><span class="line">        <span class="type">MessageDto</span> <span class="variable">messageDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageDto</span>();</span><br><span class="line">        messageDto.setAction(<span class="string">&quot;p2p&quot;</span>);</span><br><span class="line">        messageDto.setState(<span class="number">100</span>);</span><br><span class="line">        messageDto.setData(p2pMsg, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">RpcCmd</span> <span class="variable">rpcCmd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcCmd</span>();</span><br><span class="line">        rpcCmd.setMessage(messageDto);</span><br><span class="line">        rpcCmd.setRandomKey(<span class="string">&quot;RANDOM_KEY_JAVA&quot;</span>);</span><br><span class="line">        rpcCmd.setRemoteAddressKey(<span class="string">&quot;/127.0.0.1:1234&quot;</span>);</span><br><span class="line">        ProtobufSerializer.getInstance().serialize(rpcCmd, <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;java_proto_simple.dat&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deserializeFromFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RpcCmd</span> <span class="variable">rpcCmd</span> <span class="operator">=</span> ProtobufSerializer.getInstance().deSerialize(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;java_proto_simple.dat&quot;</span>), RpcCmd.class);</span><br><span class="line">        log.info(<span class="string">&quot;deserialize cmd:\n&#123;&#125;&quot;</span>, rpcCmd);</span><br><span class="line">        log.info(<span class="string">&quot;deserialize p2p msg:\n&#123;&#125;&quot;</span>, rpcCmd.getMessage().dataOfClazz(Point2PointMessage.class, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11:02:45.646 [main] INFO com.tony.simple.JavaProtostuffSerializeDemo - deserialize cmd:</span><br><span class="line">RpcCmd(message=MessageDto(action=p2p, state=100, bytesData=[10, 15, 47, 49, 50, 55, 46, 48, 46, 48, 46, 49, 58, 49, 50, 51, 51, 18, 17, 109, 101, 115, 115, 97, 103, 101, 32, 102, 114, 111, 109, 32, 106, 97, 118, 97], serialData=null, isFromBuff=false), randomKey=RANDOM_KEY_JAVA, remoteAddressKey=null)</span><br><span class="line">11:02:45.651 [main] INFO com.tony.simple.JavaProtostuffSerializeDemo - deserialize p2p msg:</span><br><span class="line">Point2PointMessage(targetAddressKey=/127.0.0.1:1233, message=message from java)</span><br></pre></td></tr></table></figure><h4 id="MessageDto中的Data-可以泛型化使用"><a href="#MessageDto中的Data-可以泛型化使用" class="headerlink" title="MessageDto中的Data 可以泛型化使用"></a>MessageDto中的Data 可以泛型化使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨语言使用Protostuff中提供的protobuff序列化传递复杂对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[] bytesData;</span><br><span class="line"><span class="keyword">private</span> Serializable serialData;</span><br></pre></td></tr></table></figure><ul><li><p>当序列化和反序列化不需要跨平台使用时，可以直接使用Serializable类型，反之需要用byte数组保存数据，进行二次序列化和反序列化。同时可以在序列化工具类<code>ProtobufSerializer</code>中将ProtobufIOUtil修改为ProtostuffIOUtil</p></li><li><p>通过setData方法进行响应的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T object, <span class="type">boolean</span> isStuff)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isStuff) &#123;</span><br><span class="line">    setSerialData(object);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    setBytesData(object);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="跨语言Python中反序列化"><a href="#跨语言Python中反序列化" class="headerlink" title="跨语言Python中反序列化"></a>跨语言Python中反序列化</h4><h5 id="创建proto文件"><a href="#创建proto文件" class="headerlink" title="创建proto文件"></a>创建proto文件</h5><ul><li><p>MessageDto.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">MessageDto</span> &#123;</span><br><span class="line">    <span class="type">string</span> action=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int32</span> state=<span class="number">2</span>;</span><br><span class="line">    <span class="type">bytes</span> data=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RpcCmd.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;MessageDto.proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">RpcCmd</span> &#123;</span><br><span class="line">    MessageDto message = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> randomKey = <span class="number">2</span>;</span><br><span class="line">    <span class="type">string</span> remoteAddressKey = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Point2PointMessage.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Point2PointMessage</span> &#123;</span><br><span class="line">    <span class="type">bytes</span> java_class = <span class="number">127</span>;</span><br><span class="line">    <span class="type">string</span> targetAddressKey = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> message = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>BytesData.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">BytesData</span> &#123;</span><br><span class="line">    <span class="type">bytes</span> content=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="导出Python3对象定义文件"><a href="#导出Python3对象定义文件" class="headerlink" title="导出Python3对象定义文件"></a>导出Python3对象定义文件</h5><ul><li>此时没有用到Any类型 可以直接导出为Python3的py文件</li><li><code>protoc --python3_out=./gen RpcCmd.proto MessageDto.proto Point2PointMessage.proto BytesData.proto</code></li><li>和pb2的区别是序列化和反序列化的方法名称进行了修改<ul><li>pb2中用的是<code>ParseFromString</code>和<code>SerializeToString</code></li><li>pb3中修改成了<code>encode_to_bytes</code>和<code>parse_from_bytes</code></li></ul></li></ul><h5 id="在Python中使用-1"><a href="#在Python中使用-1" class="headerlink" title="在Python中使用"></a>在Python中使用</h5><ul><li><p>同样的放到喜欢的包下，修改对应包名 这里不赘述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> com.tony.proto.py3 <span class="keyword">import</span> RpcCmd, Point2PointMessage, MessageDto, BytesData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serialize_to_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    p2p_msg = Point2PointMessage.Point2PointMessage()</span><br><span class="line">    p2p_msg.message = <span class="string">&quot;Hello, p2p from python&quot;</span></span><br><span class="line">    p2p_msg.targetAddressKey = <span class="string">&quot;/127.0.0.1:38211&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># bytes_data = BytesData.BytesData()</span></span><br><span class="line">    <span class="comment"># bytes_data.content = &quot;bytes data from python&quot;</span></span><br><span class="line"></span><br><span class="line">    rpc_cmd = RpcCmd.RpcCmd()</span><br><span class="line">    rpc_cmd.randomKey = <span class="string">&quot;random-key-key-random&quot;</span></span><br><span class="line">    rpc_cmd.remoteAddressKey = <span class="string">&quot;/127.0.0.1:1234&quot;</span></span><br><span class="line">    rpc_cmd.message.action = <span class="string">&quot;p2p&quot;</span></span><br><span class="line">    rpc_cmd.message.state = <span class="number">100</span></span><br><span class="line">    rpc_cmd.message.data = p2p_msg.encode_to_bytes()</span><br><span class="line">    <span class="comment"># rpc_cmd.message.data = bytes_data.encode_to_bytes()</span></span><br><span class="line">    bytes_write = rpc_cmd.encode_to_bytes()</span><br><span class="line"></span><br><span class="line">    fw = <span class="built_in">open</span>(file_path, mode=<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    fw.write(bytes_write)</span><br><span class="line">    fw.flush()</span><br><span class="line">    fw.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;write bytes to file:&quot;</span>, bytes_write)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deserialize_from_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    fo = <span class="built_in">open</span>(file_path, mode=<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    bytes_read = fo.read()</span><br><span class="line">    fo.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;read bytes from file:&quot;</span>, bytes_read)</span><br><span class="line">    rpc_cmd = RpcCmd.RpcCmd()</span><br><span class="line">    rpc_cmd.parse_from_bytes(bytes_read)</span><br><span class="line">    <span class="built_in">print</span>(rpc_cmd)</span><br><span class="line"></span><br><span class="line">    msg_bytes = rpc_cmd.message.data</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message bytes&quot;</span>, msg_bytes)</span><br><span class="line">    p2p_msg = data_of(rpc_cmd.message, Point2PointMessage.Point2PointMessage)</span><br><span class="line">    <span class="comment"># bytes_data = data_of(rpc_cmd.message, BytesData.BytesData)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;msg_content:&quot;</span>, p2p_msg.message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;msg_target:&quot;</span>, p2p_msg.targetAddressKey)</span><br><span class="line">    <span class="comment"># print(&quot;bytes_data:&quot;, bytes_data.content)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_of</span>(<span class="params">message: RpcCmd.MessageDto, message_identify</span>):</span><br><span class="line">    content = message_identify()</span><br><span class="line">    content.parse_from_bytes(message.data)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    serialize_file_path = <span class="string">&quot;./trans-data.dat&quot;</span></span><br><span class="line">    serialize_to_file(serialize_file_path)</span><br><span class="line">    deserialize_from_file(serialize_file_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>执行结果如下，同样的可以将bytes_data相关的注释取消同时注释掉p2p_msg相关的测试BytesData类型的序列化和反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">write bytes to file: b&#x27;\n3\n\x03p2p\x10d\x1a*\n\x10/127.0.0.1:38211\x12\x16Hello, p2p from python\x12\x15random-key-key-random\x1a\x0f/127.0.0.1:1234&#x27;</span><br><span class="line">read bytes from file: b&#x27;\n3\n\x03p2p\x10d\x1a*\n\x10/127.0.0.1:38211\x12\x16Hello, p2p from python\x12\x15random-key-key-random\x1a\x0f/127.0.0.1:1234&#x27;</span><br><span class="line">&lt;Message(RpcCmd)&gt;</span><br><span class="line">    &lt;MessageField(id=1, optional)&gt;:</span><br><span class="line">        &lt;Message(MessageDto)&gt;            &lt;StringField(id=1, optional)&gt;:                p2p            &lt;Int32Field(id=2, optional)&gt;:                100            &lt;BytesField(id=3, optional)&gt;:                b&#x27;\n\x10/127.0.0.1:38211\x12\x16Hello, p2p from python&#x27;</span><br><span class="line">    &lt;StringField(id=2, optional)&gt;:</span><br><span class="line">        random-key-key-random</span><br><span class="line">    &lt;StringField(id=3, optional)&gt;:</span><br><span class="line">        /127.0.0.1:1234</span><br><span class="line">message bytes b&#x27;\n\x10/127.0.0.1:38211\x12\x16Hello, p2p from python&#x27;</span><br><span class="line">msg_content: Hello, p2p from python</span><br><span class="line">msg_target: /127.0.0.1:38211</span><br></pre></td></tr></table></figure></li></ul><h5 id="Python和Java互转"><a href="#Python和Java互转" class="headerlink" title="Python和Java互转"></a>Python和Java互转</h5><ul><li>同样是仅仅修改序列化文件地址即可</li></ul><h6 id="Python反序列化Java-1"><a href="#Python反序列化Java-1" class="headerlink" title="Python反序列化Java"></a>Python反序列化Java</h6><ul><li><pre><code class="python">java_serialize_file_path = $path_to_java_serialized$deserialize_from_file(java_serialize_file_path)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 执行结果</span><br><span class="line"></span><br></pre></td></tr></table></figure>read bytes from file: b&#39;\n-\n\x03p2p\x10d\x1a$\n\x0f/127.0.0.1:1233\x12\x11message from java\x12\x0fRANDOM_KEY_JAVA&#39;&lt;Message(RpcCmd)&gt;    &lt;MessageField(id=1, optional)&gt;:        &lt;Message(MessageDto)&gt;            &lt;StringField(id=1, optional)&gt;:                p2p            &lt;Int32Field(id=2, optional)&gt;:                100            &lt;BytesField(id=3, optional)&gt;:                b&#39;\n\x0f/127.0.0.1:1233\x12\x11message from java&#39;    &lt;StringField(id=2, optional)&gt;:        RANDOM_KEY_JAVAmessage bytes b&#39;\n\x0f/127.0.0.1:1233\x12\x11message from java&#39;msg_content: message from javamsg_target: /127.0.0.1:1233<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###### Java反序列化Python</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @Test</span><br><span class="line">  public void deserializeFromPythonFile() throws Exception &#123;</span><br><span class="line">    RpcCmd rpcCmd = ProtobufSerializer.getInstance()</span><br><span class="line">      .deSerialize(new FileInputStream($python_serialize_path$), RpcCmd.class);</span><br><span class="line">    log.info(&quot;deserialize cmd:\n&#123;&#125;&quot;, rpcCmd);</span><br><span class="line">    log.info(&quot;deserialize p2p msg:\n&#123;&#125;&quot;, rpcCmd.getMessage().dataOfClazz(Point2PointMessage.class, false));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>执行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">13:15:17.821 [main] INFO com.tony.simple.JavaProtostuffSerializeDemo - deserialize cmd:</span><br><span class="line">RpcCmd(message=MessageDto(action=p2p, state=100, bytesData=[10, 16, 47, 49, 50, 55, 46, 48, 46, 48, 46, 49, 58, 51, 56, 50, 49, 49, 18, 22, 72, 101, 108, 108, 111, 44, 32, 112, 50, 112, 32, 102, 114, 111, 109, 32, 112, 121, 116, 104, 111, 110], serialData=null), randomKey=random-key-key-random, remoteAddressKey=null)</span><br><span class="line">13:15:17.828 [main] INFO com.tony.simple.JavaProtostuffSerializeDemo - deserialize p2p msg:</span><br><span class="line">Point2PointMessage(targetAddressKey=/127.0.0.1:38211, message=Hello, p2p from python)</span><br></pre></td></tr></table></figure></li></ul><h4 id="io-protostuff使用总结"><a href="#io-protostuff使用总结" class="headerlink" title="io.protostuff使用总结"></a>io.protostuff使用总结</h4><ul><li>在java平台可以直接定义普通的POJO而不需要手写proto文件并生成对应的对象文件，仅仅通过其所提供的<code>ProtobufIOUtil</code>或者<code>ProtostuffIOUtil</code>来实现序列化和反序列化即可。</li><li>当需要进行跨语言序列化和反序列化时，需要其他语言中编写对应的proto文件并生成对象文件，而在Java中的泛型实例变量则需要进行修改，改成二次序列化的byte数组，方便在Python等语言中进行解析。Java中的序列化也应采用<code>ProtobufIOUtil</code>来实现。此时，Python中可以根据业务类型反序列化成指定的对象，Java中也以该对象来序列化，反过来也是一样的操作。以此来达到的目的是定义MessageDto之后如果需要扩展，不需要修改MessageDto，仅仅需要定义更多的data类型然后赋值给MessageDto.$data。</li><li>对比纯protobuf实现的来说，在编码上更加简单，不需要写大量的Any.pack()和Any.unpack()</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用protobuf实现跨语言序列化-Java和Python实例&quot;&gt;&lt;a href=&quot;#使用protobuf实现跨语言序列化-Java和Python实例&quot; class=&quot;headerlink&quot; title=&quot;使用protobuf实现跨语言序列化 Java和Pyth</summary>
      
    
    
    
    
    <category term="后端" scheme="https://tonyjiangwj.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://tonyjiangwj.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务TX-LCN原理分析</title>
    <link href="https://tonyjiangwj.github.io/2019/10/17/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1TX-LCN%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://tonyjiangwj.github.io/2019/10/17/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1TX-LCN%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</id>
    <published>2019-10-17T06:29:11.000Z</published>
    <updated>2023-09-09T02:37:32.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式事务框架-TX-LCN原理分析"><a href="#分布式事务框架-TX-LCN原理分析" class="headerlink" title="分布式事务框架 TX-LCN原理分析"></a>分布式事务框架 TX-LCN原理分析</h2><h3 id="分布式事务的多种形式"><a href="#分布式事务的多种形式" class="headerlink" title="分布式事务的多种形式"></a>分布式事务的多种形式</h3><ul><li>XA 基于数据库实现，对数据库是否支持依赖较重。</li><li>TCC 主要基于业务代码控制，分为try&#x2F;commit&#x2F;cancel三阶段。业务侵入强，开发和维护难度大。</li><li>TXC 基于对SQL的分析，保存SQL执行所影响到的数据快照，在失败后进行回滚。业务侵入低，对SQL兼容要求高，部分SQL不支持。</li><li>LCN 通过代理数据库连接对事务进行控制。通过静态代理方式包装原来的数据库连接，根据事务状态控制提交和回滚。业务侵入低，但是因为需要代理数据库连接，必须有本地事务，同时会增加连接占用时间。</li></ul><h3 id="一、TX-LCN介绍"><a href="#一、TX-LCN介绍" class="headerlink" title="一、TX-LCN介绍"></a>一、TX-LCN介绍</h3><ul><li><p>LCN名字来源：锁定事务单元（Lock）、确认事务模块状态（Confirm）、通知事务（Notify）</p></li><li><p>TX-LCN是一款事务协调框架，其本身不操作事务，而是基于对事务的协调从而达到事务一致性的效果。</p></li><li><p>在一个分布式系统下存在多个模块，需要协调完成一次业务，那就存在一次业务事务下可能横跨多种数据源节点的可能。TX-LCN可以解决这样的问题：存在服务模块A、B、C。A模块是MySQL为数据源的服务，B模块是基于Redis为数据源的服务，C模块是基于MongoDB为数据源的服务。若要解决他们的事务一致性就需要针对不同的节点采用不同的方案，并同意协调完成分布式事务的处理。</p></li><li><p><img src="/./abc.png" alt="img"></p></li><li><p>方案：采用TX-LCN分布式事务框架，则可以将模块A使用LCN模式，B、C采用TCC模式完美解决。</p></li><li><p>TX-LCN主要分为Tx-Client和Tx-Manager两个模块，TC作为微服务下的依赖，是事务的发起方。TM是独立的服务，是事务的控制方，用于协调事务。</p></li><li><p><img src="/./yuanli.png" alt="img"></p></li><li><p>核心步骤如下：</p><ul><li><p>创建事务组</p><p>是指在事务发起方开始执行业务代码前先调用TxManager创建事务组对象，然后拿到事务标志GroupId的过程</p></li><li><p>加入事务组</p><p>是指参与方在执行完业务方法后，将该模块的事务信息通知给TxManager的操作</p></li><li><p>通知事务组</p><p>在发起方执行完业务代码后，将发起方执行结果状态通知给TxManager，TxManager根据事务最终状态和事务组的信息来通知相应的参与模块提交或回滚事务，并返回结果给事务发起方。</p></li></ul></li></ul><h3 id="二、事务协调机制"><a href="#二、事务协调机制" class="headerlink" title="二、事务协调机制"></a>二、事务协调机制</h3><ul><li><p>TX-LCN框架通过方法上配置的事务注解信息来获取当前事务类型，封装事务参数，执行业务代码，清理线程变量等等。具体的事务执行流程则交由DTXServiceExecutor.transationRunning处理，再其内部再根据事务类型和发起方的不同进行不同的处理。</p><p>transationRunning中保存事务执行日志、处理事务：执行业务前、执行业务、执行业务后、最后finally。</p><p>根据封装的事务参数获取DTXLocalControl顺序调用preBusinessCode、doBusinessCode、onBusinessCodeSuccess or onBusinessCodeError、postBusinessCode。事务发起方的preBusinessCode通过netty调用TxManager创建事务组，参与方则在onBusinessCodeSuccess中加入事务组。</p><p>参与方加入事务组后会创建一个延迟线程检测DTX事务状态，通过TxManager查询txException的信息来获取最终的state，同时也可以等待netty通知得到state信息。当超时没有得到通知时才会通过延迟线程得到state，得到通知后会清除对应的延迟线程。最后通过state提交或者回滚事务。</p><p>在整个业务代码执行完毕之后，发起方调用postBusinessCode方法，通知事务组最后的执行状态，TxManager服务端获取事务组的状态，并下发事务状态通知到各个模块（通过netty进行发送），并返回最终的state给发起方，发起方再根据state提交或者回滚事务并清理本地事务。</p></li><li><p>DTXLocalContext\TracingContext\TCGlobalContext 共同管理当前线程下事务的一些信息。包括groupId、unitId、txContext等等关键信息</p></li><li><p>在一个DTX下每个模块中都有且只有一个全局上下文TxContext，当不存在时会进行创建：</p><p>如果一个调用链是这样的A-&gt;B-&gt;C 三个都是不同的模块则会为每个模块都构造新的TxContext，保证一个模块一个。</p><p>如果三个是两个模块，即A是一个模块，B和C是一个模块根据调用链的情况肯定是C的用B的TxContext。</p></li><li><p>多个模块事务发起和参与关系通过Tracings来协调，对RPC请求传递Header信息，内容为groupId和appMap，模块在后续处理中通过获取全局上下文获取是否拥有groupId来判断是否是参与方</p></li></ul><h2 id="业务模块A、B、C"><a href="#业务模块A、B、C" class="headerlink" title="业务模块A、B、C"></a>业务模块A、B、C</h2><h4 id="正常提交"><a href="#正常提交" class="headerlink" title="正常提交"></a>正常提交</h4><p>当业务全部正常提交时，A最后调用postBusinessCode，告知TxManager通知事务组最后状态，服务端会对B\C发起通知提交事务。</p><h4 id="异常回滚"><a href="#异常回滚" class="headerlink" title="异常回滚"></a>异常回滚</h4><ol><li>当A B C 中 C业务异常会直接抛出到B 同时B 抛出到A，最后B、C中直接本地回滚，A得到后也直接回滚，此时并没有任何参与方加入到事务组中，发送的通知也没有作用，因为仅仅成功后调用onBusinessCodeSuccess的才会加入到事务组中去。</li><li>当出现异常而A没有成功告知服务端，则会记录txException? 然后B\C通过延迟检测线程获取最后的事务状态</li></ol><h2 id="TODO-详细的异常处理"><a href="#TODO-详细的异常处理" class="headerlink" title="TODO 详细的异常处理"></a>TODO 详细的异常处理</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分布式事务框架-TX-LCN原理分析&quot;&gt;&lt;a href=&quot;#分布式事务框架-TX-LCN原理分析&quot; class=&quot;headerlink&quot; title=&quot;分布式事务框架 TX-LCN原理分析&quot;&gt;&lt;/a&gt;分布式事务框架 TX-LCN原理分析&lt;/h2&gt;&lt;h3 id=&quot;分</summary>
      
    
    
    
    
    <category term="后端" scheme="https://tonyjiangwj.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://tonyjiangwj.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>记一次SQL查询优化</title>
    <link href="https://tonyjiangwj.github.io/2018/10/31/%E8%AE%B0%E4%B8%80%E6%AC%A1SQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <id>https://tonyjiangwj.github.io/2018/10/31/%E8%AE%B0%E4%B8%80%E6%AC%A1SQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</id>
    <published>2018-10-31T12:09:58.000Z</published>
    <updated>2023-09-09T02:37:32.417Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>场景：A表数据量大概6万，B表数据量在120万左右，需要在A,B 表中联合查询出符合条件的A表中的数据，不需要B表中的内容，B表中的记录仅仅作为查询条件。</p></li><li><p>主要关联关系是B表中的object_id保存着A表中的id，表结构大致如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> A(</span><br><span class="line">id <span class="type">bigint</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    cat_id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span>,<span class="operator">/</span><span class="operator">/</span> 类目id</span><br><span class="line">    condition1 <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    condition2 <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    .....</span><br><span class="line">)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> B表中保存着A表的扩展字段，所有动态扩展的字段都保存在B表中，仅通过type_id和cat_id区分</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> B(</span><br><span class="line">id <span class="type">bigint</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    object_id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    cat_id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span>,<span class="operator">/</span><span class="operator">/</span> 类目的id</span><br><span class="line">    attr_id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span>,<span class="operator">/</span><span class="operator">/</span> 属性名称id</span><br><span class="line">    <span class="keyword">value</span> <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,<span class="operator">/</span><span class="operator">/</span> 保存值</span><br><span class="line">....</span><br><span class="line">    <span class="keyword">constraint</span> `out_obj_id` <span class="keyword">foreign</span> key (`object_id`) reference A(`ID`)<span class="operator">/</span><span class="operator">/</span> object_id作为外键关联A表中的id</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>A表作为一个对象的固定属性表，目前的场景是，需要为A表添加动态扩展的属性，但是不去动A表的表结构。所以便有了B表，作为动态扩展属性值保存的表，如果没有扩展的属性在需要查询结果时，只需要常规的SELECT操作，对必要的字段加索引就行。但是现在有了扩展属性，且数据不保存在A表中，也就是当需要对扩展的动态属性作为条件进行查询A表中的记录。</p></li><li><p>从一开始的想法是通过join联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.<span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> A.condition1<span class="operator">=</span><span class="string">&#x27;A条件&#x27;</span> <span class="keyword">and</span> A.cat_id<span class="operator">=</span>$catId$ </span><br><span class="line"><span class="keyword">join</span> B t1 <span class="keyword">on</span> t1.attr_id<span class="operator">=</span>$attr1$ <span class="keyword">and</span> A.id<span class="operator">=</span>t1.object_id <span class="keyword">and</span> t1.cat_id<span class="operator">=</span>$catId$ <span class="keyword">and</span> t1.value <span class="keyword">like</span> <span class="string">&#x27;%条件1%&#x27;</span></span><br><span class="line"><span class="keyword">join</span> B t2 <span class="keyword">on</span> t2.attr_id<span class="operator">=</span>$attr2$ <span class="keyword">and</span> A.id<span class="operator">=</span>t2.object_id <span class="keyword">and</span> t2.cat_id<span class="operator">=</span>$catId$ <span class="keyword">and</span></span><br><span class="line">t2.value <span class="keyword">like</span> <span class="string">&#x27;%条件2%&#x27;</span></span><br><span class="line"><span class="keyword">join</span> B t3 <span class="keyword">on</span> t3.attr_id<span class="operator">=</span>$attr3$ <span class="keyword">and</span> A.id<span class="operator">=</span>t3.object_id <span class="keyword">and</span> t3.cat_id<span class="operator">=</span>$catId$ <span class="keyword">and</span></span><br><span class="line">t3.value <span class="keyword">like</span> <span class="string">&#x27;%条件3%&#x27;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个方法在数据量较少的时候查询效率还可以，但是当测试数据量变得比较大时，效率便大打折扣，一次查询需要2-3秒之久</p></li><li><p>后来稍作修改，改成如下，但是效率还是一样没什么差别，甚至更差</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.<span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> A.condition1<span class="operator">=</span><span class="string">&#x27;A条件&#x27;</span> <span class="keyword">and</span> A.cat_id<span class="operator">=</span>$catId$ <span class="keyword">AND</span> A.id <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">SELECT</span> t1.object_id <span class="keyword">from</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> B t <span class="keyword">on</span> t.attr_id<span class="operator">=</span>$attr1$ <span class="keyword">and</span> t1.cat_id<span class="operator">=</span>$catId$ <span class="keyword">and</span> t1.value <span class="keyword">like</span> <span class="string">&#x27;%条件1%&#x27;</span>) t1</span><br><span class="line"><span class="keyword">join</span> B t2 <span class="keyword">on</span> t2.attr_id<span class="operator">=</span>$attr2$ <span class="keyword">and</span> t1.object_id<span class="operator">=</span>t2.object_id <span class="keyword">and</span> t2.cat_id<span class="operator">=</span>$catId$ <span class="keyword">and</span></span><br><span class="line">t2.value <span class="keyword">like</span> <span class="string">&#x27;%条件2%&#x27;</span></span><br><span class="line"><span class="keyword">join</span> B t3 <span class="keyword">on</span> t3.attr_id<span class="operator">=</span>$attr3$ <span class="keyword">and</span> t1.object_id<span class="operator">=</span>t3.object_id <span class="keyword">and</span> t3.cat_id<span class="operator">=</span>$catId$ <span class="keyword">and</span></span><br><span class="line">t3.value <span class="keyword">like</span> <span class="string">&#x27;%条件3%&#x27;</span></span><br><span class="line">...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>后来仔细分析了一下上述两种方法，主要瓶颈都在join的上面了，而in本身效率也就差，对查询效率没有任何优化可言。上面的join主要涉及到的是B表join了多次，因为不同的属性必须在查询一遍，而当一次join就是加一层嵌套循环，效率可想而知的会很差。</p><hr></li><li><p>后来通过网上查阅资料，发现自己把一个重要的操作<code>EXISTS</code>给忘掉了，在当前场景下，并不需要B表中的任何数据，仅仅将B表中的记录作为条件而已，那么正好可以使用exists来判断是否符合条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">网上示例：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> B);</span><br><span class="line">上面的<span class="keyword">in</span>查询优化成下面的<span class="keyword">exists</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B <span class="keyword">where</span> A.id<span class="operator">=</span>B.id);</span><br></pre></td></tr></table></figure><ul><li>exists只返回true or false，当且仅当结果为true时才将结果集保存下来</li><li>而且多个exists and链接时，有一个为false那么后面的可以直接抛弃，而不用像join一样结果还需要去循环比较，也就是在这里可以大大的提升效率</li></ul></li><li><p>最终的SQL优化如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.<span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> A.condition1<span class="operator">=</span><span class="string">&#x27;A条件&#x27;</span> <span class="keyword">and</span> A.cat_id<span class="operator">=</span>$catId$ </span><br><span class="line">  <span class="keyword">and</span> <span class="keyword">exists</span> ( <span class="keyword">select</span> t1.<span class="operator">*</span> <span class="keyword">from</span> B t1 <span class="keyword">on</span> t1.attr_id<span class="operator">=</span>$attr1$ <span class="keyword">and</span> A.id<span class="operator">=</span>t1.object_id <span class="keyword">and</span> t1.cat_id<span class="operator">=</span>$catId$ <span class="keyword">and</span> t1.value <span class="keyword">like</span> <span class="string">&#x27;%条件1%&#x27;</span>)</span><br><span class="line">  <span class="keyword">and</span> <span class="keyword">exists</span> ( <span class="keyword">select</span> t2.<span class="operator">*</span> <span class="keyword">from</span> B t2 <span class="keyword">on</span> t2.attr_id<span class="operator">=</span>$attr2$ <span class="keyword">and</span> A.id<span class="operator">=</span>t2.object_id <span class="keyword">and</span> t2.cat_id<span class="operator">=</span>$catId$ <span class="keyword">and</span></span><br><span class="line">  t2.value <span class="keyword">like</span> <span class="string">&#x27;%条件2%&#x27;</span>)</span><br><span class="line">  <span class="keyword">and</span> <span class="keyword">exists</span> (<span class="keyword">select</span> t3.<span class="operator">*</span> <span class="keyword">from</span> B t3 <span class="keyword">on</span> t3.attr_id<span class="operator">=</span>$attr3$ <span class="keyword">and</span> A.id<span class="operator">=</span>t3.object_id <span class="keyword">and</span> t3.cat_id<span class="operator">=</span>$catId$ <span class="keyword">and</span></span><br><span class="line">  t3.value <span class="keyword">like</span> <span class="string">&#x27;%条件3%&#x27;</span>)</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure><p>在同等数据量的情况下，将2-3s的查询操作优化到了150ms左右，可以说是质变了</p></li></ul><hr><ul><li>需要注意的是并不是所有情况下都可以使用exists来替代in操作<ul><li>IN适合于外表大而内表小的情况；</li><li>EXISTS适合于外表小而内表大的情况。</li></ul></li></ul><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://www.jianshu.com/p/f212527d76ff">SQL查询中in和exists的区别分析</a></p></li><li><p><a href="https://blog.csdn.net/tonyxf121/article/details/7796657">mysql join的实现原理及优化思路</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;场景：A表数据量大概6万，B表数据量在120万左右，需要在A,B 表中联合查询出符合条件的A表中的数据，不需要B表中的内容，B表中的记录仅仅作为查询条件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要关联关系是B表中的object_id保存着A表中的id，表结构</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tar压缩解压缩命令详解</title>
    <link href="https://tonyjiangwj.github.io/2018/08/13/tar%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://tonyjiangwj.github.io/2018/08/13/tar%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</id>
    <published>2018-08-13T02:20:06.000Z</published>
    <updated>2023-09-09T02:37:32.401Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-c: 建立压缩档案</span><br><span class="line">-x：解压</span><br><span class="line">-t：查看内容</span><br><span class="line">-r：向压缩归档文件末尾追加文件</span><br><span class="line">-u：更新原压缩包中的文件</span><br><span class="line">这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。</span><br><span class="line">下面的参数是根据需要在压缩或解压档案时可选的。</span><br><span class="line">-z：有gzip属性的</span><br><span class="line">-j：有bz2属性的</span><br><span class="line">-Z：有compress属性的</span><br><span class="line">-v：显示所有过程</span><br><span class="line">-O：将文件解开到标准输出</span><br><span class="line">参数-f是必须的</span><br><span class="line">-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -tf aaa.tar.gz 在不解压的情况下查看压缩包的内容</span><br><span class="line">tar -tvf aa.tar.gz 查看详细内容</span><br></pre></td></tr></table></figure><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar –cvf jpg.tar *.jpg 将目录里所有jpg文件打包成tar.jpg</span><br><span class="line">tar –zcvf jpg.tar.gz *.jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</span><br><span class="line">tar –jcvf jpg.tar.bz2 *.jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</span><br><span class="line">tar –Zcvf jpg.tar.Z *.jpg   将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar –xvf file.tar 解压 tar包</span><br><span class="line">tar -zxvf file.tar.gz 解压tar.gz</span><br><span class="line">tar -jxvf file.tar.bz2 解压 tar.bz2tar </span><br><span class="line">tar –Zxvf file.tar.Z 解压tar.Z</span><br><span class="line">tar -xvf file.tar info.txt 只解压tar包中的info.txt文件</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、*.tar 用 tar –xvf 解压</span><br><span class="line">2、*.gz 用 gzip -d或者gunzip 解压</span><br><span class="line">3、*.tar.gz和*.tgz 用 tar –zxvf 解压</span><br><span class="line">4、*.bz2 用 bzip2 -d或者用bunzip2 解压</span><br><span class="line">5、*.tar.bz2用tar –jxvf 解压</span><br><span class="line">6、*.Z 用 uncompress 解压</span><br><span class="line">7、*.tar.Z 用tar –Zxvf 解压</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;命令详解&quot;&gt;&lt;a href=&quot;#命令详解&quot; class=&quot;headerlink&quot; title=&quot;命令详解&quot;&gt;&lt;/a&gt;命令详解&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="脚本命令" scheme="https://tonyjiangwj.github.io/categories/%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux" scheme="https://tonyjiangwj.github.io/tags/linux/"/>
    
    <category term="脚本命令" scheme="https://tonyjiangwj.github.io/tags/%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>常用命令小计</title>
    <link href="https://tonyjiangwj.github.io/2018/08/09/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%A1/"/>
    <id>https://tonyjiangwj.github.io/2018/08/09/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%A1/</id>
    <published>2018-08-09T07:32:04.000Z</published>
    <updated>2023-09-09T06:27:41.959Z</updated>
    
    <content type="html"><![CDATA[<p>记录工作中用到的一些比较实用的命令，包括Windows和Linux下的。持续更新中<span id="more"></span></p><h2 id="Maven命令"><a href="#Maven命令" class="headerlink" title="Maven命令"></a>Maven命令</h2><h3 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">创建maven项目：mvn archetype:create</span><br><span class="line">指定 group： -DgroupId=packageName</span><br><span class="line">指定 artifact：-DartifactId=projectName</span><br><span class="line">创建web项目：-DarchetypeArtifactId=maven-archetype-webapp</span><br><span class="line">创建maven项目：mvn archetype:generate</span><br><span class="line">验证项目是否正确：mvn validate</span><br><span class="line">maven 打包：mvn package</span><br><span class="line">只打jar包：mvn jar:jar</span><br><span class="line">生成源码jar包：mvn <span class="built_in">source</span>:jar</span><br><span class="line">产生应用需要的任何额外的源代码：mvn generate-sources</span><br><span class="line">编译源代码： mvn compile</span><br><span class="line">编译测试代码：mvn test-compile</span><br><span class="line">运行测试：mvn <span class="built_in">test</span></span><br><span class="line">运行检查：mvn verify</span><br><span class="line">清理maven项目：mvn clean</span><br><span class="line">生成eclipse项目：mvn eclipse:eclipse</span><br><span class="line">清理eclipse配置：mvn eclipse:clean</span><br><span class="line">生成idea项目：mvn idea:idea</span><br><span class="line">安装项目到本地仓库：mvn install</span><br><span class="line">发布项目到远程仓库：mvn deploy</span><br><span class="line">在集成测试可以运行的环境中处理和发布包：mvn integration-test</span><br><span class="line">显示maven依赖树：mvn dependency:tree</span><br><span class="line">显示maven依赖列表：mvn dependency:list</span><br><span class="line">分析maven依赖情况：mvn dependency:analyze</span><br><span class="line">下载依赖包的源码：mvn dependency:sources</span><br><span class="line">安装本地jar到本地仓库：mvn install:install-file -DgroupId=packageName -DartifactId=projectName -Dversion=version -Dpackaging=jar -Dfile=path</span><br></pre></td></tr></table></figure><p>maven 命令的格式为 mvn [plugin-name]:[goal-name]，可以接受的参数如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-D 指定参数，如 -Dmaven.test.skip(=<span class="literal">true</span>可选项) 跳过单元测试；</span><br><span class="line">-P 指定 Profile 配置，可以用于区分环境；</span><br><span class="line">-e 显示maven运行出错的信息；</span><br><span class="line">-o 离线执行命令,即不去远程仓库更新包；</span><br><span class="line">-X 显示maven允许的debug信息；</span><br><span class="line">-U 强制去远程更新snapshot的插件或依赖，默认每天只更新一次。</span><br></pre></td></tr></table></figure><p>maven分析依赖情况，通过该命令可以快速定位依赖情况，然后通过在pom里面添加exclusion排除冲突的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId:version</span><br><span class="line"><span class="comment"># -Dverbose显示详细信息</span></span><br><span class="line"><span class="comment"># -Dincludes指定包含的包，可以用*匹配如-Dincludes=org.apache.*:*</span></span><br><span class="line"><span class="comment"># -Dexcludes排除包，类似于includes</span></span><br></pre></td></tr></table></figure><h3 id="web项目相关命令"><a href="#web项目相关命令" class="headerlink" title="web项目相关命令"></a>web项目相关命令</h3><ul><li>启动tomcat：mvn tomcat:run</li><li>启动jetty：mvn jetty:run</li><li>运行打包部署：mvn tomcat:deploy</li><li>撤销部署：mvn tomcat:undeploy</li><li>启动web应用：mvn tomcat:start</li><li>停止web应用：mvn tomcat:stop</li><li>重新部署：mvn tomcat:redeploy</li><li>部署展开的war文件：mvn war:exploded tomcat:exploded</li></ul><h2 id="Linux下自动化脚本"><a href="#Linux下自动化脚本" class="headerlink" title="Linux下自动化脚本"></a>Linux下自动化脚本</h2><h3 id="根据输入进程描述自动杀死进程"><a href="#根据输入进程描述自动杀死进程" class="headerlink" title="根据输入进程描述自动杀死进程"></a>根据输入进程描述自动杀死进程</h3><ul><li><p>有时候要杀死tomcat进程通常都是分步骤找到pid再kill</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -ef | grep desc</span></span><br><span class="line">email     6762     1  0 Aug07 ?        00:01:03 processDesc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">得到上述pid 6762然后<span class="built_in">kill</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -s 9 6762</span></span><br></pre></td></tr></table></figure></li><li><p>以上操作往往效率比较低，现在可以通过awk配合<code>ps -ef | grep desc</code> 命令自动获取pid并杀死进程，可以将下述代码保存为可执行文件，在后续直接执行并输入进程描述来达成自动杀死进程的目的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">kill_func() &#123;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">赋值输入的进程描述信息</span></span><br><span class="line">  processDesc=$1</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">得到进程描述信息匹配到的进程数量，如果不唯一则退出，防止误杀</span></span><br><span class="line">  PCOUNT=$(ps -ef | grep $processDesc | grep -v grep | awk &#x27;END&#123;print NR&#125;&#x27;)</span><br><span class="line">  if [ $PCOUNT -gt 1 ]; then</span><br><span class="line">    echo &quot;for input [$processDesc] found $PCOUNT processes, pid is not unique,please recheck your input.&quot;</span><br><span class="line">    exit</span><br><span class="line">  elif [ $PCOUNT -eq 0 ]; then</span><br><span class="line">    echo &quot;process $processDesc not exist&quot;</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">得到进程PID然后执行<span class="built_in">kill</span></span></span><br><span class="line">  PID=$(ps -ef |grep $processDesc | grep -v grep | awk &#x27;&#123;printf $2&#125;&#x27;)</span><br><span class="line">  if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;process id:$PID&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;process $processDesc not exist&quot;</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line">  kill -9 $&#123;PID&#125;</span><br><span class="line">  if [ $? -eq 0 ];then</span><br><span class="line">    echo &quot;kill $processDesc success&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;kill $processDesc fail&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入进程描述信息</span></span><br><span class="line">echo &quot;please input process descripe info&quot;</span><br><span class="line">read input</span><br><span class="line">kill_func $input</span><br><span class="line">echo &quot;done!&quot;</span><br></pre></td></tr></table></figure></li></ul><p>##Linux下常用命令</p><h3 id="查看当前目录下各个文件夹的大小"><a href="#查看当前目录下各个文件夹的大小" class="headerlink" title="查看当前目录下各个文件夹的大小"></a>查看当前目录下各个文件夹的大小</h3><ul><li><code>du -h --max-depth=1</code> -h命令用来人性化展示容量单位 达到1000k用m 1000m用G,依次类推</li></ul><h3 id="查看磁盘总体用量"><a href="#查看磁盘总体用量" class="headerlink" title="查看磁盘总体用量"></a>查看磁盘总体用量</h3><ul><li><code>df -h</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录工作中用到的一些比较实用的命令，包括Windows和Linux下的。持续更新中</summary>
    
    
    
    
    <category term="脚本命令" scheme="https://tonyjiangwj.github.io/tags/%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
    <category term="Shell" scheme="https://tonyjiangwj.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>记录几个和Safari有关的坑</title>
    <link href="https://tonyjiangwj.github.io/2018/08/02/%E8%AE%B0%E5%BD%95%E5%87%A0%E4%B8%AA%E5%92%8CSafari%E6%9C%89%E5%85%B3%E7%9A%84%E5%9D%91/"/>
    <id>https://tonyjiangwj.github.io/2018/08/02/%E8%AE%B0%E5%BD%95%E5%87%A0%E4%B8%AA%E5%92%8CSafari%E6%9C%89%E5%85%B3%E7%9A%84%E5%9D%91/</id>
    <published>2018-08-02T05:35:58.000Z</published>
    <updated>2018-08-11T01:23:14.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录几个和Safari有关的坑"><a href="#记录几个和Safari有关的坑" class="headerlink" title="记录几个和Safari有关的坑"></a>记录几个和Safari有关的坑</h1><p>前段时间用vue开发移动端应用遇到了几个问题，现在记录一下</p><ul><li>第一个是和a标签有关的</li><li>第二个和date format有关</li></ul><h2 id="1-a标签的坑"><a href="#1-a标签的坑" class="headerlink" title="1.a标签的坑"></a>1.a标签的坑</h2><p> 这是一个很简单错误，但是愣是让我找了半天才找到；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$router.go(-1)&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a标签的click返回上级的动作，代码如上所示；</p><p>项目中使用了vue-router中router.go(-1)来跳转，一开始在PC和安卓模拟器上试了各种跳转完全没有问题，后来用iPhone来测试之后愣是怎么点都没用反应，期间我试了原生的history.back()&#x2F;history.go(-1)都没用作用。然后去google找啊找，找到的内容有说Safari不支持History的操作，我信了，然后看的云里雾里，还是没搞懂为什么不支持，如果不支持那其他应用是怎么跳转的，而且以前的项目也都是用history来操作返回的呀，没见过反应说Safari不能使用呀。然后继续在google上找啊找，找到很多都是如下所说的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解决方法很简单！加上return false; 就可以了</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;back&quot; onclick=&quot;javascript: window.history.go(-1);return false;&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>于是我就按他说的做了，嗯，确实可以跳转了，但是这么写也太不优雅了，而且我把<code>javascript: window.history.go(-1);return false;</code>写到function里面通过@click触发之后还是失败，甚是奇怪，这是为什么呢 到底为啥，这时我已经自暴自弃了。本着钻牛角尖的精神我还是不想用上述这么丑的操作，在每个标签里面都写js代码不仅累，而且维护起来也麻烦。在不知道各种试了多久之后，我才恍然醒悟，我以前写a标签里面href都是写成<code>href=&quot;javascript:void(0);&quot;</code>的，而这个项目直接复制的美工提供的静态代码，没有注意到他里面写的是<code>href=&quot;#&quot;</code>，而且google找到的这个解决办法里面也是写成<code>href=&quot;#&quot;</code>的。于是我将<code>href=&quot;#&quot;</code>改成了<code>href=&quot;javascript:void(0);&quot;</code>，然后重新用手机试了一下发现果然是这里的问题。那么为什么在其他平台的浏览器能行，但是在Safari上就不行，实在是想不通，私以为Safari认为点击之后就是跳到#，也就是向上滚动到锚点#top了，后续的History跳转都不会去执行。那么同时，为什么改成<code>href=&quot;javascript:void(0);&quot;</code>配合function就能和直接在html代码里面嵌入js代码达到一样的效果呢？继续google发现有说法是<code>&lt;a href=&quot;#&quot; onclick=&quot;javascript:return false;&quot;&gt;</code>和<code>&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;back()&quot;&gt;</code>是等价的，这么一说好像确实有道理，毕竟实践的结果确实是等价的。然后他们又说不推荐后者的写法，给出的原因是IE6什么的有问题，看到这里我喷了，IE6？适配？不存在的！我还是按后者写吧，更简洁而且click事件写在function里面方便维护扩展其他功能。同时也有说法是写成javascript:;也能达到同样的效果，这就见仁见智吧我觉得五五开，都可以。</p><p>所以这个困扰我大半天的bug，就这么解决了。冷漠脸。感觉浪费了大把青春啊。果然还是因为姿势水平不够，需要更多的积累。</p><h2 id="2-Safari里面的Date-Format问题"><a href="#2-Safari里面的Date-Format问题" class="headerlink" title="2.Safari里面的Date Format问题"></a>2.Safari里面的Date Format问题</h2><p>除了上述那个困扰我那么久的问题，另一个就是我在其他平台上都正常的<code>new Date()</code>日期格式化，在Safari里面格式化出来的是<code>invalid date</code>。在后台日期都是被格式化成<code>yyyy-MM-dd HH:mm:ss</code>格式的，但是前台显示不需要时间只需要日期，因为显示的同时要通过时间选择控件修改这个日期，所以没有用substring字符串截取方式直接获得日期，转而在前端用<code>new Date(dateStr)</code>转成Date再通过通用方法格式化成<code>yyyy-MM-dd</code>格式的字符串。<br>但是在Safari里，界面上显示的都成了<code>Nan-Nan-Nan</code>，通过alert调试发现<code>new Date()</code>得到的是invalid date，但是在电脑上又是正常的。基于上一个问题的经验，我马上去google了一下Safari中日期格式化的问题，果不其然，<code>YYYY-MM-DD</code>格式是包含在ECMAScript标准中的，只是Safari没有实现，没有实现。。。竟然还能这样。<br>那既然知道为什么了，解决起来也就很简单了，只需要将<code>-</code>改为<code>/</code>再new Date format一下就行了，<code>new Date(dateStr.replace(/-/g, &#39;&#39;))</code>妥妥的解决。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录几个和Safari有关的坑&quot;&gt;&lt;a href=&quot;#记录几个和Safari有关的坑&quot; class=&quot;headerlink&quot; title=&quot;记录几个和Safari有关的坑&quot;&gt;&lt;/a&gt;记录几个和Safari有关的坑&lt;/h1&gt;&lt;p&gt;前段时间用vue开发移动端应用遇到了</summary>
      
    
    
    
    <category term="前端" scheme="https://tonyjiangwj.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="jQuery" scheme="https://tonyjiangwj.github.io/tags/jQuery/"/>
    
    <category term="表格" scheme="https://tonyjiangwj.github.io/tags/%E8%A1%A8%E6%A0%BC/"/>
    
    <category term="表单验证" scheme="https://tonyjiangwj.github.io/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tonyjiangwj.github.io/2018/08/02/hello-world/"/>
    <id>https://tonyjiangwj.github.io/2018/08/02/hello-world/</id>
    <published>2018-08-01T16:00:00.000Z</published>
    <updated>2018-08-11T01:23:14.651Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://tonyjiangwj.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
